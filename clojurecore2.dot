digraph "graph" {
  "sorted-map" -> "sorted-map"
  "sorted-map" -> "defn"
  "read-line" -> "read-line"
  "read-line" -> "instance?"
  "read-line" -> "defn"
  "read-line" -> "*in*"
  "re-pattern" -> "re-pattern"
  "re-pattern" -> "instance?"
  "re-pattern" -> "defn"
  "re-pattern" -> "compile"
  "cond->>" -> "cond->>"
  "cond->>" -> "gensym"
  "cond->>" -> "fn"
  "cond->>" -> "repeat"
  "cond->>" -> "let"
  "cond->>" -> "->>"
  "cond->>" -> "concat"
  "cond->>" -> "vector"
  "cond->>" -> "assert"
  "cond->>" -> "map"
  "cond->>" -> "seq"
  "cond->>" -> "test"
  "cond->>" -> "count"
  "cond->>" -> "interleave"
  "cond->>" -> "defmacro"
  "cond->>" -> "even?"
  "cond->>" -> "partition"
  "cond->>" -> "apply"
  "cond->>" -> "list"
  "keyword?" -> "keyword?"
  "keyword?" -> "instance?"
  "keyword?" -> "defn"
  "asm-type" -> "asm-type"
  "asm-type" -> "instance?"
  "asm-type" -> "some"
  "asm-type" -> "let"
  "asm-type" -> "defn-"
  "asm-type" -> "or"
  "asm-type" -> "str"
  "asm-type" -> "prim->class"
  "asm-type" -> "the-class"
  "system-newline" -> "system-newline"
  "unchecked-inc-int" -> "unchecked-inc-int"
  "unchecked-inc-int" -> "defn"
  "val" -> "val"
  "val" -> "defn"
  "chunked-seq?" -> "chunked-seq?"
  "chunked-seq?" -> "instance?"
  "chunked-seq?" -> "defn"
  "find-protocol-impl" -> "find-protocol-impl"
  "find-protocol-impl" -> "instance?"
  "find-protocol-impl" -> "pref"
  "find-protocol-impl" -> "nil?"
  "find-protocol-impl" -> "let"
  "find-protocol-impl" -> "butlast"
  "find-protocol-impl" -> "map"
  "find-protocol-impl" -> "filter"
  "find-protocol-impl" -> "class"
  "find-protocol-impl" -> "reduce1"
  "find-protocol-impl" -> "or"
  "find-protocol-impl" -> "defn"
  "find-protocol-impl" -> "when-let"
  "find-protocol-impl" -> "first"
  "find-protocol-impl" -> "supers"
  "find-protocol-impl" -> "get"
  "find-protocol-impl" -> "and"
  "find-protocol-impl" -> "super-chain"
  "find-protocol-impl" -> "disj"
  "find-protocol-impl" -> "remove"
  "vector-of" -> "vector-of"
  "vector-of" -> "EMPTY-NODE"
  "vector-of" -> "let"
  "vector-of" -> "loop"
  "vector-of" -> "next"
  "vector-of" -> "ams"
  "vector-of" -> "defn"
  "vector-of" -> "first"
  "object-array" -> "object-array"
  "object-array" -> "defn"
  "max-key" -> "max-key"
  "max-key" -> "reduce1"
  "max-key" -> "defn"
  "max-key" -> ">"
  "list*" -> "list*"
  "list*" -> "spread"
  "list*" -> "seq"
  "list*" -> "defn"
  "list*" -> "cons"
  "ns-aliases" -> "ns-aliases"
  "ns-aliases" -> "the-ns"
  "ns-aliases" -> "ns"
  "ns-aliases" -> "defn"
  "booleans" -> "booleans"
  "booleans" -> "concat"
  "booleans" -> "definline"
  "booleans" -> "seq"
  "booleans" -> "list"
  "the-ns" -> "the-ns"
  "the-ns" -> "instance?"
  "the-ns" -> "or"
  "the-ns" -> "defn"
  "the-ns" -> "str"
  "the-ns" -> "find-ns"
  "==" -> "=="
  "==" -> "next"
  "==" -> "defn"
  "==" -> "first"
  "chunk-buffer" -> "chunk-buffer"
  "chunk-buffer" -> "defn"
  "generate-class" -> "val"
  "generate-class" -> "generate-class"
  "generate-class" -> "doseq"
  "generate-class" -> "keys"
  "generate-class" -> "fn"
  "generate-class" -> "protected-final-methods"
  "generate-class" -> "zipmap"
  "generate-class" -> "distinct"
  "generate-class" -> "let"
  "generate-class" -> "dotimes"
  "generate-class" -> "next"
  "generate-class" -> "symbol"
  "generate-class" -> "vals"
  "generate-class" -> "+"
  "generate-class" -> "into-array"
  "generate-class" -> "when-not"
  "generate-class" -> ".."
  "generate-class" -> "replicate"
  "generate-class" -> "concat"
  "generate-class" -> "conj"
  "generate-class" -> "assoc"
  "generate-class" -> "map"
  "generate-class" -> "mapcat"
  "generate-class" -> "inc"
  "generate-class" -> "defn-"
  "generate-class" -> "seq"
  "generate-class" -> "add-annotations"
  "generate-class" -> "filter"
  "generate-class" -> "key"
  "generate-class" -> "name"
  "generate-class" -> "reduce1"
  "generate-class" -> "or"
  "generate-class" -> "replace"
  "generate-class" -> "validate-generate-class-options"
  "generate-class" -> "count"
  "generate-class" -> "when-let"
  "generate-class" -> "comp"
  "generate-class" -> "nth"
  "generate-class" -> "find-field"
  "generate-class" -> "cons"
  "generate-class" -> "ctor-sigs"
  "generate-class" -> "str"
  "generate-class" -> "="
  "generate-class" -> ">"
  "generate-class" -> "overload-name"
  "generate-class" -> "method-sig"
  "generate-class" -> "methods"
  "generate-class" -> "supers"
  "generate-class" -> "partial"
  "generate-class" -> "pos?"
  "generate-class" -> "contains?"
  "generate-class" -> "apply"
  "generate-class" -> "int"
  "generate-class" -> "non-private-methods"
  "generate-class" -> "pop"
  "generate-class" -> "merge-with"
  "generate-class" -> "into1"
  "generate-class" -> "the-class"
  "generate-class" -> "when"
  "generate-class" -> "make-array"
  "generate-class" -> "merge"
  "generate-class" -> "meta"
  "longs" -> "longs"
  "longs" -> "concat"
  "longs" -> "definline"
  "longs" -> "seq"
  "longs" -> "list"
  "process-annotation" -> "process-annotation"
  "process-annotation" -> "doseq"
  "process-annotation" -> "defn-"
  "process-annotation" -> "name"
  "process-annotation" -> "map?"
  "process-annotation" -> "add-annotation"
  "shorts" -> "shorts"
  "shorts" -> "concat"
  "shorts" -> "definline"
  "shorts" -> "seq"
  "shorts" -> "list"
  "data-reader-var" -> "data-reader-var"
  "data-reader-var" -> "symbol"
  "data-reader-var" -> "defn-"
  "data-reader-var" -> "intern"
  "data-reader-var" -> "create-ns"
  "data-reader-var" -> "name"
  "data-reader-var" -> "namespace"
  "is-annotation?" -> "is-annotation?"
  "is-annotation?" -> "class?"
  "is-annotation?" -> "defn-"
  "is-annotation?" -> "and"
  "instance?" -> "instance?"
  "instance?" -> "fn"
  ">0?" -> ">0?"
  ">0?" -> "defn"
  "format" -> "format"
  "format" -> "defn"
  "format" -> "to-array"
  "sequential?" -> "instance?"
  "sequential?" -> "sequential?"
  "sequential?" -> "defn"
  "fn?" -> "instance?"
  "fn?" -> "fn?"
  "fn?" -> "defn"
  "empty" -> "instance?"
  "empty" -> "empty"
  "empty" -> "defn"
  "empty" -> "when"
  "bound-fn" -> "bound-fn"
  "bound-fn" -> "fn"
  "bound-fn" -> "concat"
  "bound-fn" -> "bound-fn*"
  "bound-fn" -> "seq"
  "bound-fn" -> "defmacro"
  "bound-fn" -> "list"
  "dorun" -> "dorun"
  "dorun" -> "next"
  "dorun" -> "seq"
  "dorun" -> "defn"
  "dorun" -> "pos?"
  "dorun" -> "and"
  "dorun" -> "dec"
  "dorun" -> "when"
  "time" -> "time"
  "time" -> "let"
  "time" -> "prn"
  "time" -> "-"
  "time" -> "concat"
  "time" -> "vector"
  "time" -> "/"
  "time" -> "seq"
  "time" -> "str"
  "time" -> "defmacro"
  "time" -> "apply"
  "time" -> "double"
  "time" -> "list"
  "remove-method" -> "remove-method"
  "remove-method" -> "defn"
  "gensym" -> "gensym"
  "gensym" -> "intern"
  "gensym" -> "defn"
  "gensym" -> "str"
  "not=" -> "not="
  "not=" -> "defn"
  "not=" -> "="
  "not=" -> "apply"
  "not=" -> "not"
  "*3" -> "*3"
  "load-data-readers" -> "load-data-readers"
  "load-data-readers" -> "fn"
  "load-data-readers" -> "*data-readers*"
  "load-data-readers" -> "load-data-reader-file"
  "load-data-readers" -> "defn-"
  "load-data-readers" -> "data-reader-urls"
  "load-data-readers" -> "reduce"
  "load-data-readers" -> "alter-var-root"
  "pref" -> "pref"
  "pref" -> "defn-"
  "unchecked-multiply" -> "unchecked-multiply"
  "unchecked-multiply" -> "defn"
  "doseq" -> "keyword?"
  "doseq" -> "chunked-seq?"
  "doseq" -> "gensym"
  "doseq" -> "doseq"
  "doseq" -> "if-not"
  "doseq" -> "second"
  "doseq" -> "cond"
  "doseq" -> "fn"
  "doseq" -> "let"
  "doseq" -> "loop"
  "doseq" -> "next"
  "doseq" -> "unchecked-inc"
  "doseq" -> "with-meta"
  "doseq" -> "concat"
  "doseq" -> "vector"
  "doseq" -> "vector?"
  "doseq" -> "seq"
  "doseq" -> "nnext"
  "doseq" -> "chunk-rest"
  "doseq" -> "count"
  "doseq" -> "when-let"
  "doseq" -> "nth"
  "doseq" -> "<"
  "doseq" -> "first"
  "doseq" -> "="
  "doseq" -> "defmacro"
  "doseq" -> "even?"
  "doseq" -> "apply"
  "doseq" -> "int"
  "doseq" -> "when"
  "doseq" -> "chunk-first"
  "doseq" -> "list"
  "doseq" -> "assert-args"
  "bit-or" -> "bit-or"
  "bit-or" -> "reduce1"
  "bit-or" -> "or"
  "bit-or" -> "defn"
  "aset-byte" -> "aset-byte"
  "aset-byte" -> "def-aset"
  "aset-byte" -> "byte"
  "if-not" -> "if-not"
  "if-not" -> "concat"
  "if-not" -> "seq"
  "if-not" -> "test"
  "if-not" -> "defmacro"
  "if-not" -> "list"
  "if-not" -> "not"
  "send-via" -> "send-via"
  "send-via" -> "binding-conveyor-fn"
  "send-via" -> "defn"
  "send-via" -> "*agent*"
  "send-via" -> "binding"
  "hash-set" -> "hash-set"
  "hash-set" -> "keys"
  "hash-set" -> "defn"
  "->Vec" -> "val"
  "->Vec" -> "object-array"
  "->Vec" -> "=="
  "->Vec" -> "instance?"
  "->Vec" -> "empty"
  "->Vec" -> "some"
  "->Vec" -> "nil?"
  "->Vec" -> "cond"
  "->Vec" -> "EMPTY-NODE"
  "->Vec" -> "let"
  "->Vec" -> "dotimes"
  "->Vec" -> "loop"
  "->Vec" -> "next"
  "->Vec" -> "+"
  "->Vec" -> "into-array"
  "->Vec" -> "-"
  "->Vec" -> "rseq"
  "->Vec" -> "identical?"
  "->Vec" -> "zero?"
  "->Vec" -> "bit-and"
  "->Vec" -> "assoc"
  "->Vec" -> "boolean"
  "->Vec" -> "doto"
  "->Vec" -> "inc"
  "->Vec" -> "seq"
  "->Vec" -> "unchecked-multiply-int"
  "->Vec" -> "aset"
  "->Vec" -> "or"
  "->Vec" -> "hash"
  "->Vec" -> "count"
  "->Vec" -> "set"
  "->Vec" -> "comp"
  "->Vec" -> "nth"
  "->Vec" -> "<"
  "->Vec" -> "peek"
  "->Vec" -> "cons"
  "->Vec" -> "="
  "->Vec" -> ">"
  "->Vec" -> "unchecked-add-int"
  "->Vec" -> ">="
  "->Vec" -> "bit-shift-left"
  "->Vec" -> "deftype"
  "->Vec" -> "cast"
  "->Vec" -> "get"
  "->Vec" -> "<="
  "->Vec" -> "pos?"
  "->Vec" -> "and"
  "->Vec" -> "reify"
  "->Vec" -> "subvec"
  "->Vec" -> "int"
  "->Vec" -> "dec"
  "->Vec" -> "aget"
  "->Vec" -> "aclone"
  "->Vec" -> "pop"
  "->Vec" -> "bit-shift-right"
  "->Vec" -> "when"
  "->Vec" -> "remove"
  "->Vec" -> "every?"
  "->Vec" -> "meta"
  "add-watch" -> "add-watch"
  "add-watch" -> "fn"
  "add-watch" -> "key"
  "add-watch" -> "defn"
  "unchecked-dec" -> "unchecked-dec"
  "unchecked-dec" -> "defn"
  "some" -> "some"
  "some" -> "next"
  "some" -> "seq"
  "some" -> "or"
  "some" -> "defn"
  "some" -> "first"
  "some" -> "when"
  "nil?" -> "nil?"
  "nil?" -> "defn"
  "string?" -> "instance?"
  "string?" -> "string?"
  "string?" -> "fn"
  "boolean-array" -> "boolean-array"
  "boolean-array" -> "defn"
  "second" -> "second"
  "second" -> "fn"
  "second" -> "next"
  "second" -> "first"
  "letfn" -> "letfn"
  "letfn" -> "fn"
  "letfn" -> "vec"
  "letfn" -> "concat"
  "letfn" -> "map"
  "letfn" -> "seq"
  "letfn" -> "interleave"
  "letfn" -> "cons"
  "letfn" -> "first"
  "letfn" -> "defmacro"
  "letfn" -> "list"
  "keys" -> "keys"
  "keys" -> "map"
  "keys" -> "defn"
  "for" -> "keyword?"
  "for" -> "chunked-seq?"
  "for" -> "chunk-buffer"
  "for" -> "gensym"
  "for" -> "second"
  "for" -> "for"
  "for" -> "cond"
  "for" -> "fn"
  "for" -> "let"
  "for" -> "loop"
  "for" -> "unchecked-inc"
  "for" -> "concat"
  "for" -> "vector"
  "for" -> "conj"
  "for" -> "vector?"
  "for" -> "chunk-cons"
  "for" -> "chunk-append"
  "for" -> "when-first"
  "for" -> "seq"
  "for" -> "reduce1"
  "for" -> "chunk-rest"
  "for" -> "count"
  "for" -> "when-let"
  "for" -> "<"
  "for" -> "peek"
  "for" -> "cons"
  "for" -> "str"
  "for" -> "first"
  "for" -> "="
  "for" -> "defmacro"
  "for" -> "even?"
  "for" -> "partition"
  "for" -> "chunk"
  "for" -> "apply"
  "for" -> "rest"
  "for" -> "int"
  "for" -> "pop"
  "for" -> "lazy-seq"
  "for" -> "when"
  "for" -> "chunk-first"
  "for" -> "list"
  "for" -> "assert-args"
  "*2" -> "*2"
  "long-array" -> "long-array"
  "long-array" -> "defn"
  "pop-thread-bindings" -> "pop-thread-bindings"
  "pop-thread-bindings" -> "defn"
  "check-valid-options" -> "hash-set"
  "check-valid-options" -> "keys"
  "check-valid-options" -> "check-valid-options"
  "check-valid-options" -> "map"
  "check-valid-options" -> "seq"
  "check-valid-options" -> "defn"
  "check-valid-options" -> "str"
  "check-valid-options" -> "first"
  "check-valid-options" -> "apply"
  "check-valid-options" -> "rest"
  "check-valid-options" -> "disj"
  "check-valid-options" -> "when"
  "error-mode" -> "error-mode"
  "error-mode" -> "defn"
  "cond" -> "second"
  "cond" -> "cond"
  "cond" -> "next"
  "cond" -> "cons"
  "cond" -> "first"
  "cond" -> "defmacro"
  "cond" -> "when"
  "cond" -> "list"
  "bit-set" -> "bit-set"
  "bit-set" -> "defn"
  "spit" -> "spit"
  "spit" -> "with-open"
  "spit" -> "writer"
  "spit" -> "defn"
  "spit" -> "str"
  "spit" -> "apply"
  "find-protocol-method" -> "find-protocol-impl"
  "find-protocol-method" -> "find-protocol-method"
  "find-protocol-method" -> "defn"
  "find-protocol-method" -> "get"
  "fn" -> "list*"
  "fn" -> "fn"
  "fn" -> "let"
  "fn" -> "symbol?"
  "fn" -> "next"
  "fn" -> "with-meta"
  "fn" -> "seq?"
  "fn" -> "concat"
  "fn" -> "vector"
  "fn" -> "sigs"
  "fn" -> "vector?"
  "fn" -> "assert"
  "fn" -> "map"
  "fn" -> "seq"
  "fn" -> "name"
  "fn" -> "or"
  "fn" -> "map?"
  "fn" -> "count"
  "fn" -> "<"
  "fn" -> "cons"
  "fn" -> "str"
  "fn" -> "first"
  "fn" -> "defmacro"
  "fn" -> "and"
  "fn" -> "maybe-destructured"
  "fn" -> "apply"
  "fn" -> "when"
  "fn" -> "list"
  "fn" -> "not"
  "fn" -> "meta"
  "sorted?" -> "instance?"
  "sorted?" -> "sorted?"
  "sorted?" -> "defn"
  "short-array" -> "short-array"
  "short-array" -> "defn"
  "ns-unalias" -> "the-ns"
  "ns-unalias" -> "ns-unalias"
  "ns-unalias" -> "ns"
  "ns-unalias" -> "defn"
  "ns-publics" -> "val"
  "ns-publics" -> "the-ns"
  "ns-publics" -> "instance?"
  "ns-publics" -> "fn"
  "ns-publics" -> "ns-publics"
  "ns-publics" -> "let"
  "ns-publics" -> "ns"
  "ns-publics" -> "filter-key"
  "ns-publics" -> "defn"
  "ns-publics" -> "="
  "ns-publics" -> "and"
  "ns-publics" -> "ns-map"
  "EMPTY-NODE" -> "object-array"
  "EMPTY-NODE" -> "EMPTY-NODE"
  "char-array" -> "char-array"
  "char-array" -> "defn"
  "dosync" -> "dosync"
  "dosync" -> "sync"
  "dosync" -> "concat"
  "dosync" -> "seq"
  "dosync" -> "defmacro"
  "dosync" -> "list"
  "all-ns" -> "all-ns"
  "all-ns" -> "defn"
  "long" -> "long"
  "long" -> "defn"
  "with-open" -> "cond"
  "with-open" -> "with-open"
  "with-open" -> "let"
  "with-open" -> "symbol?"
  "with-open" -> "concat"
  "with-open" -> "vector?"
  "with-open" -> "seq"
  "with-open" -> "count"
  "with-open" -> "="
  "with-open" -> "defmacro"
  "with-open" -> "even?"
  "with-open" -> "subvec"
  "with-open" -> "list"
  "with-open" -> "assert-args"
  "init-proxy" -> "init-proxy"
  "init-proxy" -> "defn"
  "init-proxy" -> "proxy"
  "add-classpath" -> "add-classpath"
  "add-classpath" -> "defn"
  "add-classpath" -> "println"
  "false?" -> "false?"
  "false?" -> "defn"
  "await1" -> "await1"
  "await1" -> "defn"
  "await1" -> "await"
  "await1" -> "pos?"
  "await1" -> "when"
  "true?" -> "true?"
  "true?" -> "defn"
  "gen-interface" -> "gen-interface"
  "gen-interface" -> "let"
  "gen-interface" -> "deref"
  "gen-interface" -> "*compile-files*"
  "gen-interface" -> "generate-interface"
  "gen-interface" -> "str"
  "gen-interface" -> "defmacro"
  "gen-interface" -> "apply"
  "gen-interface" -> "hash-map"
  "sync" -> "fn"
  "sync" -> "sync"
  "sync" -> "concat"
  "sync" -> "vector"
  "sync" -> "seq"
  "sync" -> "defmacro"
  "sync" -> "apply"
  "sync" -> "list"
  "emit-extend-protocol" -> "fn"
  "emit-extend-protocol" -> "emit-extend-protocol"
  "emit-extend-protocol" -> "let"
  "emit-extend-protocol" -> "concat"
  "emit-extend-protocol" -> "map"
  "emit-extend-protocol" -> "defn-"
  "emit-extend-protocol" -> "seq"
  "emit-extend-protocol" -> "extend-type"
  "emit-extend-protocol" -> "parse-impls"
  "emit-extend-protocol" -> "list"
  "short" -> "short"
  "short" -> "defn"
  "ns-unmap" -> "the-ns"
  "ns-unmap" -> "ns-unmap"
  "ns-unmap" -> "ns"
  "ns-unmap" -> "defn"
  "protected-final-methods" -> "fn"
  "protected-final-methods" -> "protected-final-methods"
  "protected-final-methods" -> "let"
  "protected-final-methods" -> "filter-methods"
  "protected-final-methods" -> "defn-"
  "protected-final-methods" -> "and"
  "protected-final-methods" -> "not"
  "repeat" -> "repeat"
  "repeat" -> "defn"
  "repeat" -> "cons"
  "repeat" -> "lazy-seq"
  "repeat" -> "take"
  "zipmap" -> "keys"
  "zipmap" -> "zipmap"
  "zipmap" -> "loop"
  "zipmap" -> "next"
  "zipmap" -> "vals"
  "zipmap" -> "assoc"
  "zipmap" -> "map"
  "zipmap" -> "seq"
  "zipmap" -> "defn"
  "zipmap" -> "first"
  "zipmap" -> "and"
  "distinct" -> "fn"
  "distinct" -> "distinct"
  "distinct" -> "let"
  "distinct" -> "conj"
  "distinct" -> "seq"
  "distinct" -> "defn"
  "distinct" -> "when-let"
  "distinct" -> "cons"
  "distinct" -> "contains?"
  "distinct" -> "rest"
  "distinct" -> "lazy-seq"
  "get-in" -> "get-in"
  "get-in" -> "let"
  "get-in" -> "loop"
  "get-in" -> "next"
  "get-in" -> "identical?"
  "get-in" -> "seq"
  "get-in" -> "reduce1"
  "get-in" -> "defn"
  "get-in" -> "first"
  "get-in" -> "get"
  "bit-xor" -> "bit-xor"
  "bit-xor" -> "reduce1"
  "bit-xor" -> "defn"
  "char-escape-string" -> "char-escape-string"
  "complement" -> "fn"
  "complement" -> "complement"
  "complement" -> "defn"
  "complement" -> "apply"
  "complement" -> "not"
  "let" -> "let"
  "let" -> "concat"
  "let" -> "vector?"
  "let" -> "destructure"
  "let" -> "seq"
  "let" -> "count"
  "let" -> "defmacro"
  "let" -> "even?"
  "let" -> "list"
  "let" -> "assert-args"
  "get-validator" -> "get-validator"
  "get-validator" -> "defn"
  "dotimes" -> "second"
  "dotimes" -> "long"
  "dotimes" -> "let"
  "dotimes" -> "dotimes"
  "dotimes" -> "loop"
  "dotimes" -> "unchecked-inc"
  "dotimes" -> "concat"
  "dotimes" -> "vector"
  "dotimes" -> "vector?"
  "dotimes" -> "seq"
  "dotimes" -> "count"
  "dotimes" -> "<"
  "dotimes" -> "first"
  "dotimes" -> "="
  "dotimes" -> "defmacro"
  "dotimes" -> "apply"
  "dotimes" -> "when"
  "dotimes" -> "list"
  "dotimes" -> "assert-args"
  "ref-max-history" -> "ref-max-history"
  "ref-max-history" -> "ref"
  "ref-max-history" -> "defn"
  "promise" -> "let"
  "promise" -> "promise"
  "promise" -> "deref"
  "promise" -> "zero?"
  "promise" -> "defn"
  "promise" -> "pos?"
  "promise" -> "and"
  "promise" -> "reify"
  "promise" -> "atom"
  "promise" -> "when"
  "promise" -> "compare-and-set!"
  "defmethod" -> "fn"
  "defmethod" -> "defmethod"
  "defmethod" -> "with-meta"
  "defmethod" -> "concat"
  "defmethod" -> "seq"
  "defmethod" -> "defmacro"
  "defmethod" -> "list"
  "set-agent-send-executor!" -> "set-agent-send-executor!"
  "set-agent-send-executor!" -> "defn"
  "protocol?" -> "protocol?"
  "protocol?" -> "boolean"
  "protocol?" -> "defn-"
  "-'" -> "-'"
  "-'" -> "reduce1"
  "-'" -> "defn"
  "pop!" -> "pop!"
  "pop!" -> "defn"
  "derive" -> "instance?"
  "derive" -> "not="
  "derive" -> "fn"
  "derive" -> "let"
  "derive" -> "derive"
  "derive" -> "when-not"
  "derive" -> "conj"
  "derive" -> "assoc"
  "derive" -> "print-str"
  "derive" -> "assert"
  "derive" -> "class?"
  "derive" -> "reduce1"
  "derive" -> "global-hierarchy"
  "derive" -> "or"
  "derive" -> "defn"
  "derive" -> "namespace"
  "derive" -> "cons"
  "derive" -> "get"
  "derive" -> "and"
  "derive" -> "contains?"
  "derive" -> "when"
  "derive" -> "alter-var-root"
  "aset-float" -> "aset-float"
  "aset-float" -> "def-aset"
  "aset-float" -> "float"
  "valid-java-method-name" -> "valid-java-method-name"
  "valid-java-method-name" -> "defn-"
  "valid-java-method-name" -> "="
  "extend" -> "doseq"
  "extend" -> "protocol?"
  "extend" -> "extend"
  "extend" -> "-reset-methods"
  "extend" -> "when-not"
  "extend" -> "assoc-in"
  "extend" -> "defn"
  "extend" -> "implements?"
  "extend" -> "str"
  "extend" -> "partition"
  "extend" -> "when"
  "extend" -> "alter-var-root"
  "-reset-methods" -> "doseq"
  "-reset-methods" -> "let"
  "-reset-methods" -> "-reset-methods"
  "-reset-methods" -> "defn"
  "-reset-methods" -> "keyword"
  "lazy-cat" -> "lazy-cat"
  "lazy-cat" -> "concat"
  "lazy-cat" -> "map"
  "lazy-cat" -> "seq"
  "lazy-cat" -> "defmacro"
  "lazy-cat" -> "lazy-seq"
  "lazy-cat" -> "list"
  "commute" -> "commute"
  "commute" -> "ref"
  "commute" -> "defn"
  "defstruct" -> "keys"
  "defstruct" -> "defstruct"
  "defstruct" -> "concat"
  "defstruct" -> "create-struct"
  "defstruct" -> "seq"
  "defstruct" -> "name"
  "defstruct" -> "defmacro"
  "defstruct" -> "list"
  "with-in-str" -> "with-open"
  "with-in-str" -> "with-in-str"
  "with-in-str" -> "concat"
  "with-in-str" -> "vector"
  "with-in-str" -> "seq"
  "with-in-str" -> "->"
  "with-in-str" -> "defmacro"
  "with-in-str" -> "apply"
  "with-in-str" -> "*in*"
  "with-in-str" -> "list"
  "with-in-str" -> "binding"
  "partition-by" -> "let"
  "partition-by" -> "partition-by"
  "partition-by" -> "next"
  "partition-by" -> "seq"
  "partition-by" -> "defn"
  "partition-by" -> "count"
  "partition-by" -> "when-let"
  "partition-by" -> "cons"
  "partition-by" -> "first"
  "partition-by" -> "="
  "partition-by" -> "take-while"
  "partition-by" -> "drop"
  "partition-by" -> "lazy-seq"
  "rem" -> "rem"
  "rem" -> "defn"
  "rem" -> "num"
  "odd?" -> "odd?"
  "odd?" -> "defn"
  "odd?" -> "even?"
  "odd?" -> "not"
  "symbol?" -> "instance?"
  "symbol?" -> "symbol?"
  "symbol?" -> "defn"
  "mapv" -> "fn"
  "mapv" -> "mapv"
  "mapv" -> "map"
  "mapv" -> "conj!"
  "mapv" -> "into"
  "mapv" -> "transient"
  "mapv" -> "defn"
  "mapv" -> "reduce"
  "mapv" -> "->"
  "mapv" -> "persistent!"
  "mapv" -> "apply"
  "*print-level*" -> "*print-level*"
  "thread-bound?" -> "thread-bound?"
  "thread-bound?" -> "defn"
  "thread-bound?" -> "every?"
  "*data-readers*" -> "*data-readers*"
  "deref-future" -> "deref-future"
  "deref-future" -> "defn"
  "root-resource" -> "root-resource"
  "root-resource" -> ".."
  "root-resource" -> "defn-"
  "root-resource" -> "name"
  "root-resource" -> "replace"
  "root-resource" -> "str"
  "filterv" -> "fn"
  "filterv" -> "filterv"
  "filterv" -> "conj!"
  "filterv" -> "transient"
  "filterv" -> "defn"
  "filterv" -> "reduce"
  "filterv" -> "->"
  "filterv" -> "persistent!"
  "proxy-call-with-super" -> "let"
  "proxy-call-with-super" -> "proxy-call-with-super"
  "proxy-call-with-super" -> "assoc"
  "proxy-call-with-super" -> "defn"
  "proxy-call-with-super" -> "proxy-mappings"
  "proxy-call-with-super" -> "update-proxy"
  "ns-interns" -> "val"
  "ns-interns" -> "the-ns"
  "ns-interns" -> "instance?"
  "ns-interns" -> "fn"
  "ns-interns" -> "let"
  "ns-interns" -> "ns-interns"
  "ns-interns" -> "ns"
  "ns-interns" -> "filter-key"
  "ns-interns" -> "defn"
  "ns-interns" -> "="
  "ns-interns" -> "and"
  "ns-interns" -> "ns-map"
  "re-matches" -> "let"
  "re-matches" -> "re-matches"
  "re-matches" -> "re-matcher"
  "re-matches" -> "re-groups"
  "re-matches" -> "defn"
  "re-matches" -> "when"
  "split-with" -> "split-with"
  "split-with" -> "defn"
  "split-with" -> "take-while"
  "split-with" -> "drop-while"
  "munge" -> "symbol?"
  "munge" -> "munge"
  "munge" -> "symbol"
  "munge" -> "defn"
  "munge" -> "str"
  "loop" -> "gensym"
  "loop" -> "fn"
  "loop" -> "let"
  "loop" -> "symbol?"
  "loop" -> "loop"
  "loop" -> "vec"
  "loop" -> "concat"
  "loop" -> "vector"
  "loop" -> "conj"
  "loop" -> "vector?"
  "loop" -> "map"
  "loop" -> "destructure"
  "loop" -> "seq"
  "loop" -> "reduce1"
  "loop" -> "count"
  "loop" -> "interleave"
  "loop" -> "="
  "loop" -> "defmacro"
  "loop" -> "even?"
  "loop" -> "drop"
  "loop" -> "take-nth"
  "loop" -> "list"
  "loop" -> "assert-args"
  "future-done?" -> "future-done?"
  "future-done?" -> "defn"
  "spread" -> "nil?"
  "spread" -> "cond"
  "spread" -> "spread"
  "spread" -> "next"
  "spread" -> "seq"
  "spread" -> "defn"
  "spread" -> "cons"
  "spread" -> "first"
  "next" -> "fn"
  "next" -> "next"
  "import" -> "second"
  "import" -> "fn"
  "import" -> "let"
  "import" -> "symbol?"
  "import" -> "import"
  "import" -> "seq?"
  "import" -> "concat"
  "import" -> "conj"
  "import" -> "map"
  "import" -> "seq"
  "import" -> "name"
  "import" -> "reduce1"
  "import" -> "str"
  "import" -> "first"
  "import" -> "="
  "import" -> "defmacro"
  "import" -> "and"
  "import" -> "rest"
  "import" -> "into1"
  "import" -> "list"
  "print-meta" -> "print-meta"
  "print-meta" -> "defn-"
  "print-meta" -> "pr-on"
  "print-meta" -> "or"
  "print-meta" -> "count"
  "print-meta" -> "when-let"
  "print-meta" -> "="
  "print-meta" -> "pos?"
  "print-meta" -> "and"
  "print-meta" -> "*print-dup*"
  "print-meta" -> "*print-readably*"
  "print-meta" -> "*print-meta*"
  "print-meta" -> "when"
  "print-meta" -> "meta"
  "deliver" -> "val"
  "deliver" -> "promise"
  "deliver" -> "deliver"
  "deliver" -> "defn"
  "symbol" -> "symbol?"
  "symbol" -> "symbol"
  "symbol" -> "ns"
  "symbol" -> "name"
  "symbol" -> "defn"
  "vals" -> "vals"
  "vals" -> "map"
  "vals" -> "defn"
  "->ArrayChunk" -> "loop"
  "->ArrayChunk" -> "+"
  "->ArrayChunk" -> "-"
  "->ArrayChunk" -> "inc"
  "->ArrayChunk" -> "count"
  "->ArrayChunk" -> "nth"
  "->ArrayChunk" -> "<"
  "->ArrayChunk" -> "reduce"
  "->ArrayChunk" -> "="
  "->ArrayChunk" -> "deftype"
  "select-keys" -> "keys"
  "select-keys" -> "let"
  "select-keys" -> "loop"
  "select-keys" -> "next"
  "select-keys" -> "select-keys"
  "select-keys" -> "with-meta"
  "select-keys" -> "conj"
  "select-keys" -> "map"
  "select-keys" -> "seq"
  "select-keys" -> "defn"
  "select-keys" -> "first"
  "select-keys" -> "find"
  "select-keys" -> "meta"
  "re-matcher" -> "re-matcher"
  "re-matcher" -> "defn"
  "rand" -> "rand"
  "rand" -> "*"
  "rand" -> "defn"
  "deref" -> "instance?"
  "deref" -> "deref-future"
  "deref" -> "deref"
  "deref" -> "ref"
  "deref" -> "defn"
  "load-one" -> "dosync"
  "load-one" -> "commute"
  "load-one" -> "root-resource"
  "load-one" -> "load-one"
  "load-one" -> "conj"
  "load-one" -> "defn-"
  "load-one" -> "load"
  "load-one" -> "find-ns"
  "load-one" -> "*loaded-libs*"
  "load-one" -> "throw-if"
  "load-one" -> "require"
  "load-one" -> "and"
  "load-one" -> "when"
  "load-one" -> "not"
  "some->" -> "gensym"
  "some->" -> "nil?"
  "some->" -> "fn"
  "some->" -> "repeat"
  "some->" -> "let"
  "some->" -> "some->"
  "some->" -> "concat"
  "some->" -> "vector"
  "some->" -> "map"
  "some->" -> "seq"
  "some->" -> "interleave"
  "some->" -> "->"
  "some->" -> "defmacro"
  "some->" -> "apply"
  "some->" -> "list"
  "unchecked-inc" -> "unchecked-inc"
  "unchecked-inc" -> "defn"
  "libspec?" -> "keyword?"
  "libspec?" -> "nil?"
  "libspec?" -> "second"
  "libspec?" -> "symbol?"
  "libspec?" -> "libspec?"
  "libspec?" -> "vector?"
  "libspec?" -> "defn-"
  "libspec?" -> "or"
  "libspec?" -> "and"
  "read" -> "read"
  "read" -> "boolean"
  "read" -> "defn"
  "read" -> "*in*"
  "sequence" -> "sequence"
  "sequence" -> "seq?"
  "sequence" -> "seq"
  "sequence" -> "or"
  "sequence" -> "defn"
  "make-hierarchy" -> "make-hierarchy"
  "make-hierarchy" -> "defn"
  "+" -> "+"
  "+" -> "reduce1"
  "+" -> "defn"
  "+" -> "cast"
  "number?" -> "instance?"
  "number?" -> "number?"
  "number?" -> "defn"
  "assoc!" -> "val"
  "assoc!" -> "second"
  "assoc!" -> "let"
  "assoc!" -> "assoc!"
  "assoc!" -> "key"
  "assoc!" -> "nnext"
  "assoc!" -> "defn"
  "assoc!" -> "first"
  "descendants" -> "descendants"
  "descendants" -> "class?"
  "descendants" -> "global-hierarchy"
  "descendants" -> "defn"
  "descendants" -> "get"
  "descendants" -> "not-empty"
  "generate-proxy" -> "doseq"
  "generate-proxy" -> "bit-or"
  "generate-proxy" -> "second"
  "generate-proxy" -> "keys"
  "generate-proxy" -> "for"
  "generate-proxy" -> "fn"
  "generate-proxy" -> "let"
  "generate-proxy" -> "dotimes"
  "generate-proxy" -> "loop"
  "generate-proxy" -> "next"
  "generate-proxy" -> "vals"
  "generate-proxy" -> "+"
  "generate-proxy" -> "generate-proxy"
  "generate-proxy" -> "into-array"
  "generate-proxy" -> "when-not"
  "generate-proxy" -> ".."
  "generate-proxy" -> "replicate"
  "generate-proxy" -> "concat"
  "generate-proxy" -> "vector"
  "generate-proxy" -> "conj"
  "generate-proxy" -> "assoc"
  "generate-proxy" -> "map"
  "generate-proxy" -> "defn-"
  "generate-proxy" -> "seq"
  "generate-proxy" -> "reduce1"
  "generate-proxy" -> "proxy-name"
  "generate-proxy" -> "or"
  "generate-proxy" -> "count"
  "generate-proxy" -> "nth"
  "generate-proxy" -> "most-specific"
  "generate-proxy" -> "->"
  "generate-proxy" -> "cons"
  "generate-proxy" -> "first"
  "generate-proxy" -> "="
  "generate-proxy" -> ">"
  "generate-proxy" -> "method-sig"
  "generate-proxy" -> "pos?"
  "generate-proxy" -> "group-by-sig"
  "generate-proxy" -> "pop"
  "generate-proxy" -> "into1"
  "generate-proxy" -> "when"
  "generate-proxy" -> "make-array"
  "generate-proxy" -> "remove"
  "generate-proxy" -> "dissoc"
  "generate-proxy" -> "not"
  "into-array" -> "into-array"
  "into-array" -> "seq"
  "into-array" -> "defn"
  "into-array" -> "type"
  "last" -> "fn"
  "last" -> "next"
  "last" -> "last"
  "last" -> "first"
  "some-fn" -> "list*"
  "some-fn" -> "some"
  "some-fn" -> "fn"
  "some-fn" -> "let"
  "some-fn" -> "some-fn"
  "some-fn" -> "or"
  "some-fn" -> "defn"
  "unchecked-negate" -> "unchecked-negate"
  "unchecked-negate" -> "defn"
  "integer?" -> "instance?"
  "integer?" -> "integer?"
  "integer?" -> "or"
  "integer?" -> "defn"
  "defrecord" -> "let"
  "defrecord" -> "*ns*"
  "defrecord" -> "import"
  "defrecord" -> "symbol"
  "defrecord" -> "defrecord"
  "defrecord" -> "with-meta"
  "defrecord" -> "vec"
  "defrecord" -> "concat"
  "defrecord" -> "vector"
  "defrecord" -> "map"
  "defrecord" -> "parse-opts+specs"
  "defrecord" -> "build-positional-factory"
  "defrecord" -> "seq"
  "defrecord" -> "name"
  "defrecord" -> "defn"
  "defrecord" -> "->"
  "defrecord" -> "str"
  "defrecord" -> "defmacro"
  "defrecord" -> "methods"
  "defrecord" -> "namespace-munge"
  "defrecord" -> "declare"
  "defrecord" -> "apply"
  "defrecord" -> "emit-defrecord"
  "defrecord" -> "validate-fields"
  "defrecord" -> "list"
  "reduced?" -> "reduced?"
  "reduced?" -> "defn"
  "alter" -> "alter"
  "alter" -> "ref"
  "alter" -> "defn"
  "prn" -> "prn"
  "prn" -> "newline"
  "prn" -> "*flush-on-newline*"
  "prn" -> "defn"
  "prn" -> "apply"
  "prn" -> "pr"
  "prn" -> "when"
  "prn" -> "flush"
  "with-meta" -> "fn"
  "with-meta" -> "with-meta"
  "with-out-str" -> "let"
  "with-out-str" -> "with-out-str"
  "with-out-str" -> "concat"
  "with-out-str" -> "vector"
  "with-out-str" -> "*out*"
  "with-out-str" -> "seq"
  "with-out-str" -> "str"
  "with-out-str" -> "defmacro"
  "with-out-str" -> "apply"
  "with-out-str" -> "list"
  "with-out-str" -> "binding"
  "floats" -> "floats"
  "floats" -> "concat"
  "floats" -> "definline"
  "floats" -> "seq"
  "floats" -> "list"
  "*" -> "*"
  "*" -> "reduce1"
  "*" -> "defn"
  "*" -> "cast"
  "emit-hinted-impl" -> "fn"
  "emit-hinted-impl" -> "zipmap"
  "emit-hinted-impl" -> "let"
  "emit-hinted-impl" -> "emit-hinted-impl"
  "emit-hinted-impl" -> "vary-meta"
  "emit-hinted-impl" -> "vector"
  "emit-hinted-impl" -> "assoc"
  "emit-hinted-impl" -> "vector?"
  "emit-hinted-impl" -> "map"
  "emit-hinted-impl" -> "defn-"
  "emit-hinted-impl" -> "name"
  "emit-hinted-impl" -> "->"
  "emit-hinted-impl" -> "cons"
  "emit-hinted-impl" -> "first"
  "emit-hinted-impl" -> "apply"
  "emit-hinted-impl" -> "keyword"
  "emit-hinted-impl" -> "drop"
  "emit-hinted-impl" -> "list"
  "when-not" -> "when-not"
  "when-not" -> "test"
  "when-not" -> "cons"
  "when-not" -> "defmacro"
  "when-not" -> "list"
  "butlast" -> "fn"
  "butlast" -> "loop"
  "butlast" -> "next"
  "butlast" -> "butlast"
  "butlast" -> "conj"
  "butlast" -> "seq"
  "butlast" -> "first"
  "-" -> "-"
  "-" -> "reduce1"
  "-" -> "defn"
  "->>" -> "next"
  "->>" -> "with-meta"
  "->>" -> "->>"
  "->>" -> "seq?"
  "->>" -> "concat"
  "->>" -> "seq"
  "->>" -> "first"
  "->>" -> "defmacro"
  "->>" -> "list"
  "->>" -> "meta"
  "reversible?" -> "instance?"
  "reversible?" -> "reversible?"
  "reversible?" -> "defn"
  "rseq" -> "rseq"
  "rseq" -> "defn"
  "send-off" -> "send-via"
  "send-off" -> "send-off"
  "send-off" -> "defn"
  "send-off" -> "apply"
  "seq?" -> "instance?"
  "seq?" -> "fn"
  "seq?" -> "seq?"
  "refer-clojure" -> "refer-clojure"
  "refer-clojure" -> "concat"
  "refer-clojure" -> "seq"
  "refer-clojure" -> "defmacro"
  "refer-clojure" -> "refer"
  "refer-clojure" -> "list"
  "identical?" -> "identical?"
  "identical?" -> "defn"
  ".." -> ".."
  ".." -> "concat"
  ".." -> "seq"
  ".." -> "defmacro"
  ".." -> "list"
  "print" -> "print"
  "print" -> "defn"
  "print" -> "apply"
  "print" -> "pr"
  "print" -> "*print-readably*"
  "print" -> "binding"
  "vary-meta" -> "with-meta"
  "vary-meta" -> "vary-meta"
  "vary-meta" -> "defn"
  "vary-meta" -> "apply"
  "vary-meta" -> "meta"
  "with-loading-context" -> "fn"
  "with-loading-context" -> "with-meta"
  "with-loading-context" -> "with-loading-context"
  "with-loading-context" -> "concat"
  "with-loading-context" -> "vector"
  "with-loading-context" -> "seq"
  "with-loading-context" -> "defmacro"
  "with-loading-context" -> "apply"
  "with-loading-context" -> "hash-map"
  "with-loading-context" -> "list"
  "agent-error" -> "agent-error"
  "agent-error" -> "defn"
  "bit-flip" -> "bit-flip"
  "bit-flip" -> "defn"
  "zero?" -> "zero?"
  "zero?" -> "defn"
  "bit-and" -> "bit-and"
  "bit-and" -> "reduce1"
  "bit-and" -> "defn"
  "bit-and" -> "and"
  "load-data-reader-file" -> "data-reader-var"
  "load-data-reader-file" -> "not="
  "load-data-reader-file" -> "fn"
  "load-data-reader-file" -> "with-open"
  "load-data-reader-file" -> "let"
  "load-data-reader-file" -> "symbol?"
  "load-data-reader-file" -> "read"
  "load-data-reader-file" -> "load-data-reader-file"
  "load-data-reader-file" -> "assoc"
  "load-data-reader-file" -> "defn-"
  "load-data-reader-file" -> "*file*"
  "load-data-reader-file" -> "map?"
  "load-data-reader-file" -> "ex-info"
  "load-data-reader-file" -> "reduce"
  "load-data-reader-file" -> "str"
  "load-data-reader-file" -> "and"
  "load-data-reader-file" -> "contains?"
  "load-data-reader-file" -> "when"
  "load-data-reader-file" -> "not"
  "load-data-reader-file" -> "binding"
  "unquote-splicing" -> "unquote-splicing"
  "future" -> "with-meta"
  "future" -> "future"
  "future" -> "concat"
  "future" -> "vector"
  "future" -> "future-call"
  "future" -> "seq"
  "future" -> "defmacro"
  "future" -> "apply"
  "future" -> "hash-map"
  "future" -> "list"
  "re-groups" -> "let"
  "re-groups" -> "loop"
  "re-groups" -> "zero?"
  "re-groups" -> "re-groups"
  "re-groups" -> "conj"
  "re-groups" -> "inc"
  "re-groups" -> "defn"
  "re-groups" -> "<="
  "newline" -> "system-newline"
  "newline" -> "newline"
  "newline" -> "*out*"
  "newline" -> "defn"
  "replicate" -> "repeat"
  "replicate" -> "replicate"
  "replicate" -> "defn"
  "replicate" -> "take"
  "keep-indexed" -> "chunked-seq?"
  "keep-indexed" -> "chunk-buffer"
  "keep-indexed" -> "nil?"
  "keep-indexed" -> "letfn"
  "keep-indexed" -> "let"
  "keep-indexed" -> "dotimes"
  "keep-indexed" -> "+"
  "keep-indexed" -> "when-not"
  "keep-indexed" -> "keep-indexed"
  "keep-indexed" -> "chunk-cons"
  "keep-indexed" -> "chunk-append"
  "keep-indexed" -> "inc"
  "keep-indexed" -> "seq"
  "keep-indexed" -> "defn"
  "keep-indexed" -> "chunk-rest"
  "keep-indexed" -> "count"
  "keep-indexed" -> "when-let"
  "keep-indexed" -> "cons"
  "keep-indexed" -> "first"
  "keep-indexed" -> "chunk"
  "keep-indexed" -> "rest"
  "keep-indexed" -> "lazy-seq"
  "keep-indexed" -> "chunk-first"
  "char?" -> "instance?"
  "char?" -> "fn"
  "char?" -> "char?"
  "def-aset" -> "val"
  "def-aset" -> "def-aset"
  "def-aset" -> "concat"
  "def-aset" -> "vector"
  "def-aset" -> "seq"
  "def-aset" -> "name"
  "def-aset" -> "defn"
  "def-aset" -> "defmacro"
  "def-aset" -> "array"
  "def-aset" -> "apply"
  "def-aset" -> "aget"
  "def-aset" -> "hash-map"
  "def-aset" -> "list"
  "distinct?" -> "not="
  "distinct?" -> "loop"
  "distinct?" -> "distinct?"
  "distinct?" -> "conj"
  "distinct?" -> "defn"
  "distinct?" -> "="
  "distinct?" -> "contains?"
  "distinct?" -> "not"
  "remove-ns" -> "remove-ns"
  "remove-ns" -> "defn"
  "ratio?" -> "instance?"
  "ratio?" -> "ratio?"
  "ratio?" -> "defn"
  "xml-seq" -> "string?"
  "xml-seq" -> "complement"
  "xml-seq" -> "xml-seq"
  "xml-seq" -> "seq"
  "xml-seq" -> "defn"
  "xml-seq" -> "comp"
  "xml-seq" -> "tree-seq"
  "vec" -> "instance?"
  "vec" -> "vec"
  "vec" -> "defn"
  "vec" -> "to-array"
  "concat" -> "chunked-seq?"
  "concat" -> "fn"
  "concat" -> "let"
  "concat" -> "next"
  "concat" -> "concat"
  "concat" -> "chunk-cons"
  "concat" -> "seq"
  "concat" -> "defn"
  "concat" -> "chunk-rest"
  "concat" -> "cons"
  "concat" -> "first"
  "concat" -> "rest"
  "concat" -> "lazy-seq"
  "concat" -> "when"
  "concat" -> "chunk-first"
  "update-in" -> "update-in"
  "update-in" -> "assoc"
  "update-in" -> "defn"
  "update-in" -> "get"
  "update-in" -> "apply"
  "vector" -> "vector"
  "vector" -> "defn"
  "vector" -> "cons"
  "sigs" -> "fn"
  "sigs" -> "let"
  "sigs" -> "loop"
  "sigs" -> "next"
  "sigs" -> "with-meta"
  "sigs" -> "seq?"
  "sigs" -> "sigs"
  "sigs" -> "conj"
  "sigs" -> "seq"
  "sigs" -> "assert-valid-fdecl"
  "sigs" -> "map?"
  "sigs" -> "first"
  "sigs" -> "list"
  "sigs" -> "meta"
  "with-bindings*" -> "pop-thread-bindings"
  "with-bindings*" -> "with-bindings*"
  "with-bindings*" -> "defn"
  "with-bindings*" -> "push-thread-bindings"
  "with-bindings*" -> "apply"
  "conj" -> "fn"
  "conj" -> "next"
  "conj" -> "conj"
  "conj" -> "first"
  "bases" -> "let"
  "bases" -> "bases"
  "bases" -> "seq"
  "bases" -> "defn"
  "bases" -> "cons"
  "bases" -> "when"
  "with-redefs" -> "fn"
  "with-redefs" -> "zipmap"
  "with-redefs" -> "next"
  "with-redefs" -> "concat"
  "with-redefs" -> "vector"
  "with-redefs" -> "with-redefs"
  "with-redefs" -> "map"
  "with-redefs" -> "seq"
  "with-redefs" -> "with-redefs-fn"
  "with-redefs" -> "defmacro"
  "with-redefs" -> "apply"
  "with-redefs" -> "take-nth"
  "with-redefs" -> "list"
  "root-directory" -> "let"
  "root-directory" -> "root-resource"
  "root-directory" -> "root-directory"
  "root-directory" -> "defn-"
  "root-directory" -> "subs"
  "/" -> "/"
  "/" -> "reduce1"
  "/" -> "defn"
  "unchecked-add" -> "unchecked-add"
  "unchecked-add" -> "defn"
  "ref-set" -> "val"
  "ref-set" -> "ref-set"
  "ref-set" -> "ref"
  "ref-set" -> "defn"
  "ref-set" -> "set"
  "assoc" -> "val"
  "assoc" -> "second"
  "assoc" -> "fn"
  "assoc" -> "let"
  "assoc" -> "next"
  "assoc" -> "assoc"
  "assoc" -> "map"
  "assoc" -> "key"
  "assoc" -> "nnext"
  "assoc" -> "first"
  "unchecked-remainder-int" -> "unchecked-remainder-int"
  "unchecked-remainder-int" -> "defn"
  "seque" -> "instance?"
  "seque" -> "nil?"
  "seque" -> "fn"
  "seque" -> "let"
  "seque" -> "loop"
  "seque" -> "deref"
  "seque" -> "when-not"
  "seque" -> "send-off"
  "seque" -> "identical?"
  "seque" -> "seque"
  "seque" -> "seq"
  "seque" -> "defn"
  "seque" -> "cons"
  "seque" -> "int"
  "seque" -> "lazy-seq"
  "seque" -> "when"
  "seque" -> "agent"
  "load-libs" -> "keyword?"
  "load-libs" -> "doseq"
  "load-libs" -> "nil?"
  "load-libs" -> "repeat"
  "load-libs" -> "complement"
  "load-libs" -> "let"
  "load-libs" -> "libspec?"
  "load-libs" -> "load-libs"
  "load-libs" -> "defn-"
  "load-libs" -> "seq"
  "load-libs" -> "filter"
  "load-libs" -> "interleave"
  "load-libs" -> "str"
  "load-libs" -> "throw-if"
  "load-libs" -> "interpose"
  "load-libs" -> "apply"
  "load-libs" -> "prependss"
  "load-libs" -> "remove"
  "load-libs" -> "load-lib"
  "load-libs" -> "not"
  "aset-char" -> "def-aset"
  "aset-char" -> "aset-char"
  "aset-char" -> "char"
  "boolean" -> "boolean"
  "boolean" -> "defn"
  "read-string" -> "read-string"
  "read-string" -> "defn"
  "binding-conveyor-fn" -> "fn"
  "binding-conveyor-fn" -> "let"
  "binding-conveyor-fn" -> "binding-conveyor-fn"
  "binding-conveyor-fn" -> "defn"
  "binding-conveyor-fn" -> "apply"
  "neg?" -> "neg?"
  "neg?" -> "defn"
  "float-array" -> "float-array"
  "float-array" -> "defn"
  "doubles" -> "concat"
  "doubles" -> "doubles"
  "doubles" -> "definline"
  "doubles" -> "seq"
  "doubles" -> "list"
  "isa?" -> "some"
  "isa?" -> "loop"
  "isa?" -> "isa?"
  "isa?" -> "vector?"
  "isa?" -> "class?"
  "isa?" -> "inc"
  "isa?" -> "global-hierarchy"
  "isa?" -> "or"
  "isa?" -> "defn"
  "isa?" -> "count"
  "isa?" -> "="
  "isa?" -> "supers"
  "isa?" -> "and"
  "isa?" -> "contains?"
  "isa?" -> "not"
  "future-call" -> "let"
  "future-call" -> "deref-future"
  "future-call" -> "deref"
  "future-call" -> "binding-conveyor-fn"
  "future-call" -> "future-call"
  "future-call" -> "defn"
  "future-call" -> "get"
  "future-call" -> "reify"
  "doto" -> "gensym"
  "doto" -> "fn"
  "doto" -> "let"
  "doto" -> "next"
  "doto" -> "seq?"
  "doto" -> "concat"
  "doto" -> "vector"
  "doto" -> "doto"
  "doto" -> "map"
  "doto" -> "seq"
  "doto" -> "first"
  "doto" -> "defmacro"
  "doto" -> "apply"
  "doto" -> "list"
  "extends?" -> "boolean"
  "extends?" -> "extends?"
  "extends?" -> "or"
  "extends?" -> "defn"
  "extends?" -> "implements?"
  "extends?" -> "get"
  "fits-table?" -> "-"
  "fits-table?" -> "fits-table?"
  "fits-table?" -> "defn-"
  "fits-table?" -> "seq"
  "fits-table?" -> "<"
  "fits-table?" -> "max-switch-table-size"
  "fits-table?" -> "max"
  "fits-table?" -> "ints"
  "fits-table?" -> "apply"
  "fits-table?" -> "min"
  "remove-watch" -> "remove-watch"
  "remove-watch" -> "key"
  "remove-watch" -> "defn"
  "print-str" -> "with-out-str"
  "print-str" -> "print"
  "print-str" -> "print-str"
  "print-str" -> "defn"
  "print-str" -> "apply"
  "*e" -> "*e"
  "ref-history-count" -> "ref-history-count"
  "ref-history-count" -> "ref"
  "ref-history-count" -> "defn"
  "rsubseq" -> "let"
  "rsubseq" -> "next"
  "rsubseq" -> "rsubseq"
  "rsubseq" -> "mk-bound-fn"
  "rsubseq" -> "seq"
  "rsubseq" -> "key"
  "rsubseq" -> "test"
  "rsubseq" -> "defn"
  "rsubseq" -> "when-let"
  "rsubseq" -> "take-while"
  "future?" -> "instance?"
  "future?" -> "future?"
  "future?" -> "defn"
  "vector?" -> "instance?"
  "vector?" -> "fn"
  "vector?" -> "vector?"
  "prep-hashes" -> "=="
  "prep-hashes" -> "let"
  "prep-hashes" -> "zero?"
  "prep-hashes" -> "fits-table?"
  "prep-hashes" -> "prep-hashes"
  "prep-hashes" -> "map"
  "prep-hashes" -> "defn-"
  "prep-hashes" -> "merge-hash-collisions"
  "prep-hashes" -> "or"
  "prep-hashes" -> "hash"
  "prep-hashes" -> "count"
  "prep-hashes" -> "identity"
  "prep-hashes" -> "case-map"
  "prep-hashes" -> "shift-mask"
  "prep-hashes" -> "maybe-min-hash"
  "prep-hashes" -> "into1"
  "split-at" -> "split-at"
  "split-at" -> "defn"
  "split-at" -> "drop"
  "split-at" -> "take"
  "chunk-cons" -> "chunk-cons"
  "chunk-cons" -> "defn"
  "chunk-cons" -> "chunk"
  "chunk-cons" -> "rest"
  "ns-refers" -> "val"
  "ns-refers" -> "the-ns"
  "ns-refers" -> "instance?"
  "ns-refers" -> "not="
  "ns-refers" -> "fn"
  "ns-refers" -> "let"
  "ns-refers" -> "ns-refers"
  "ns-refers" -> "ns"
  "ns-refers" -> "filter-key"
  "ns-refers" -> "defn"
  "ns-refers" -> "and"
  "ns-refers" -> "ns-map"
  "create-struct" -> "keys"
  "create-struct" -> "create-struct"
  "create-struct" -> "defn"
  "setup-reference" -> "let"
  "setup-reference" -> "setup-reference"
  "setup-reference" -> "defn"
  "setup-reference" -> "apply"
  "setup-reference" -> "when"
  "setup-reference" -> "hash-map"
  "proxy-super" -> "fn"
  "proxy-super" -> "proxy-call-with-super"
  "proxy-super" -> "concat"
  "proxy-super" -> "vector"
  "proxy-super" -> "proxy-super"
  "proxy-super" -> "seq"
  "proxy-super" -> "name"
  "proxy-super" -> "defmacro"
  "proxy-super" -> "apply"
  "proxy-super" -> "list"
  "int-array" -> "int-array"
  "int-array" -> "defn"
  "unchecked-long" -> "unchecked-long"
  "unchecked-long" -> "defn"
  "float" -> "float"
  "float" -> "defn"
  "mk-bound-fn" -> "fn"
  "mk-bound-fn" -> ".."
  "mk-bound-fn" -> "mk-bound-fn"
  "mk-bound-fn" -> "key"
  "mk-bound-fn" -> "test"
  "mk-bound-fn" -> "defn"
  "mk-bound-fn" -> "compare"
  "mk-bound-fn" -> "comparator"
  "assert" -> "when-not"
  "assert" -> "concat"
  "assert" -> "assert"
  "assert" -> "seq"
  "assert" -> "pr-str"
  "assert" -> "str"
  "assert" -> "defmacro"
  "assert" -> "when"
  "assert" -> "*assert*"
  "assert" -> "list"
  "map" -> "chunked-seq?"
  "map" -> "chunk-buffer"
  "map" -> "fn"
  "map" -> "let"
  "map" -> "dotimes"
  "map" -> "conj"
  "map" -> "chunk-cons"
  "map" -> "map"
  "map" -> "chunk-append"
  "map" -> "seq"
  "map" -> "defn"
  "map" -> "chunk-rest"
  "map" -> "count"
  "map" -> "when-let"
  "map" -> "cons"
  "map" -> "first"
  "map" -> "identity"
  "map" -> "and"
  "map" -> "chunk"
  "map" -> "apply"
  "map" -> "rest"
  "map" -> "int"
  "map" -> "lazy-seq"
  "map" -> "when"
  "map" -> "chunk-first"
  "map" -> "every?"
  "+'" -> "+'"
  "+'" -> "reduce1"
  "+'" -> "defn"
  "+'" -> "cast"
  "add-doc-and-meta" -> "concat"
  "add-doc-and-meta" -> "assoc"
  "add-doc-and-meta" -> "add-doc-and-meta"
  "add-doc-and-meta" -> "seq"
  "add-doc-and-meta" -> "alter-meta!"
  "add-doc-and-meta" -> "name"
  "add-doc-and-meta" -> "defmacro"
  "add-doc-and-meta" -> "list"
  "add-doc-and-meta" -> "merge"
  "add-doc-and-meta" -> "meta"
  "counted?" -> "instance?"
  "counted?" -> "counted?"
  "counted?" -> "defn"
  "memfn" -> "gensym"
  "memfn" -> "fn"
  "memfn" -> "let"
  "memfn" -> "with-meta"
  "memfn" -> "concat"
  "memfn" -> "vector"
  "memfn" -> "memfn"
  "memfn" -> "seq"
  "memfn" -> "name"
  "memfn" -> "defmacro"
  "memfn" -> "apply"
  "memfn" -> "list"
  "memfn" -> "meta"
  "double-array" -> "double-array"
  "double-array" -> "defn"
  "ams" -> "ams"
  "accessor" -> "accessor"
  "accessor" -> "key"
  "accessor" -> "defn"
  "*print-length*" -> "*print-length*"
  "frequencies" -> "fn"
  "frequencies" -> "assoc!"
  "frequencies" -> "frequencies"
  "frequencies" -> "inc"
  "frequencies" -> "transient"
  "frequencies" -> "defn"
  "frequencies" -> "reduce"
  "frequencies" -> "get"
  "frequencies" -> "persistent!"
  "chars" -> "concat"
  "chars" -> "chars"
  "chars" -> "definline"
  "chars" -> "seq"
  "chars" -> "list"
  "class?" -> "instance?"
  "class?" -> "class?"
  "class?" -> "defn"
  "rand-int" -> "rand"
  "rand-int" -> "rand-int"
  "rand-int" -> "defn"
  "rand-int" -> "int"
  "*1" -> "*1"
  "aset-short" -> "short"
  "aset-short" -> "def-aset"
  "aset-short" -> "aset-short"
  "unchecked-short" -> "unchecked-short"
  "unchecked-short" -> "defn"
  "prn-str" -> "prn"
  "prn-str" -> "with-out-str"
  "prn-str" -> "prn-str"
  "prn-str" -> "defn"
  "prn-str" -> "apply"
  "iterate" -> "iterate"
  "iterate" -> "defn"
  "iterate" -> "cons"
  "iterate" -> "lazy-seq"
  "chunk-append" -> "chunk-append"
  "chunk-append" -> "defn"
  "when-first" -> "let"
  "when-first" -> "concat"
  "when-first" -> "vector"
  "when-first" -> "vector?"
  "when-first" -> "when-first"
  "when-first" -> "seq"
  "when-first" -> "count"
  "when-first" -> "when-let"
  "when-first" -> "first"
  "when-first" -> "="
  "when-first" -> "defmacro"
  "when-first" -> "apply"
  "when-first" -> "list"
  "when-first" -> "assert-args"
  "unchecked-double" -> "unchecked-double"
  "unchecked-double" -> "defn"
  "parse-opts" -> "keyword?"
  "parse-opts" -> "loop"
  "parse-opts" -> "assoc"
  "parse-opts" -> "parse-opts"
  "parse-opts" -> "defn-"
  "slurp" -> "with-open"
  "slurp" -> "let"
  "slurp" -> "loop"
  "slurp" -> "reader"
  "slurp" -> "neg?"
  "slurp" -> "slurp"
  "slurp" -> "defn"
  "slurp" -> "str"
  "slurp" -> "char"
  "slurp" -> "apply"
  "slurp" -> "normalize-slurp-opts"
  "restart-agent" -> "let"
  "restart-agent" -> "restart-agent"
  "restart-agent" -> "defn"
  "restart-agent" -> "apply"
  "restart-agent" -> "hash-map"
  "parse-opts+specs" -> "keys"
  "parse-opts+specs" -> "fn"
  "parse-opts+specs" -> "let"
  "parse-opts+specs" -> "vals"
  "parse-opts+specs" -> "deref"
  "parse-opts+specs" -> "vec"
  "parse-opts+specs" -> "concat"
  "parse-opts+specs" -> "print-str"
  "parse-opts+specs" -> "map"
  "parse-opts+specs" -> "parse-opts"
  "parse-opts+specs" -> "parse-opts+specs"
  "parse-opts+specs" -> "defn-"
  "parse-opts+specs" -> "seq"
  "parse-opts+specs" -> "var?"
  "parse-opts+specs" -> "name"
  "parse-opts+specs" -> "set"
  "parse-opts+specs" -> "when-let"
  "parse-opts+specs" -> "->"
  "parse-opts+specs" -> "cons"
  "parse-opts+specs" -> "methods"
  "parse-opts+specs" -> "resolve"
  "parse-opts+specs" -> "maybe-destructured"
  "parse-opts+specs" -> "apply"
  "parse-opts+specs" -> "disj"
  "parse-opts+specs" -> "remove"
  "parse-opts+specs" -> "parse-impls"
  "unchecked-int" -> "unchecked-int"
  "unchecked-int" -> "defn"
  "mapcat" -> "concat"
  "mapcat" -> "map"
  "mapcat" -> "mapcat"
  "mapcat" -> "defn"
  "mapcat" -> "apply"
  "assoc-in" -> "assoc"
  "assoc-in" -> "assoc-in"
  "assoc-in" -> "defn"
  "assoc-in" -> "get"
  "get-thread-bindings" -> "get-thread-bindings"
  "get-thread-bindings" -> "defn"
  "filter-methods" -> "let"
  "filter-methods" -> "loop"
  "filter-methods" -> "next"
  "filter-methods" -> "concat"
  "filter-methods" -> "conj"
  "filter-methods" -> "assoc"
  "filter-methods" -> "filter-methods"
  "filter-methods" -> "defn-"
  "filter-methods" -> "seq"
  "filter-methods" -> "or"
  "filter-methods" -> "first"
  "filter-methods" -> "method-sig"
  "build-positional-factory" -> "for"
  "build-positional-factory" -> "let"
  "build-positional-factory" -> "symbol"
  "build-positional-factory" -> "+"
  "build-positional-factory" -> "concat"
  "build-positional-factory" -> "vector"
  "build-positional-factory" -> "split-at"
  "build-positional-factory" -> "build-positional-factory"
  "build-positional-factory" -> "defn-"
  "build-positional-factory" -> "seq"
  "build-positional-factory" -> "name"
  "build-positional-factory" -> "defn"
  "build-positional-factory" -> "count"
  "build-positional-factory" -> "nth"
  "build-positional-factory" -> "->"
  "build-positional-factory" -> "str"
  "build-positional-factory" -> "="
  "build-positional-factory" -> "range"
  "build-positional-factory" -> "apply"
  "build-positional-factory" -> "list"
  "special-symbol?" -> "special-symbol?"
  "special-symbol?" -> "defn"
  "special-symbol?" -> "contains?"
  "ref" -> "let"
  "ref" -> "setup-reference"
  "ref" -> "ref"
  "ref" -> "defn"
  "ref" -> "apply"
  "ref" -> "when"
  "ref" -> "hash-map"
  "conj!" -> "conj!"
  "conj!" -> "defn"
  "find-var" -> "find-var"
  "find-var" -> "defn"
  "find-var" -> "find"
  "inc" -> "inc"
  "inc" -> "defn"
  "future-cancel" -> "future-cancel"
  "future-cancel" -> "defn"
  "emit-extend-type" -> "let"
  "emit-extend-type" -> "extend"
  "emit-extend-type" -> "emit-hinted-impl"
  "emit-extend-type" -> "concat"
  "emit-extend-type" -> "mapcat"
  "emit-extend-type" -> "emit-extend-type"
  "emit-extend-type" -> "defn-"
  "emit-extend-type" -> "seq"
  "emit-extend-type" -> "partial"
  "emit-extend-type" -> "parse-impls"
  "emit-extend-type" -> "list"
  "every-pred" -> "list*"
  "every-pred" -> "fn"
  "every-pred" -> "let"
  "every-pred" -> "boolean"
  "every-pred" -> "every-pred"
  "every-pred" -> "defn"
  "every-pred" -> "and"
  "every-pred" -> "every?"
  "definline" -> "fn"
  "definline" -> "let"
  "definline" -> "split-with"
  "definline" -> "concat"
  "definline" -> "assoc"
  "definline" -> "vector?"
  "definline" -> "definline"
  "definline" -> "seq"
  "definline" -> "alter-meta!"
  "definline" -> "name"
  "definline" -> "defn"
  "definline" -> "comp"
  "definline" -> "defmacro"
  "definline" -> "apply"
  "definline" -> "eval"
  "definline" -> "list"
  "definline" -> "not"
  "bound-fn*" -> "fn"
  "bound-fn*" -> "let"
  "bound-fn*" -> "with-bindings*"
  "bound-fn*" -> "get-thread-bindings"
  "bound-fn*" -> "bound-fn*"
  "bound-fn*" -> "defn"
  "bound-fn*" -> "apply"
  "default-data-readers" -> "default-data-readers"
  "unchecked-subtract" -> "unchecked-subtract"
  "unchecked-subtract" -> "defn"
  "ns-name" -> "the-ns"
  "ns-name" -> "ns-name"
  "ns-name" -> "ns"
  "ns-name" -> "defn"
  "shuffle" -> "let"
  "shuffle" -> "shuffle"
  "shuffle" -> "defn"
  "defn-" -> "list*"
  "defn-" -> "with-meta"
  "defn-" -> "assoc"
  "defn-" -> "defn-"
  "defn-" -> "name"
  "defn-" -> "defn"
  "defn-" -> "defmacro"
  "defn-" -> "meta"
  "re-find" -> "let"
  "re-find" -> "re-matcher"
  "re-find" -> "re-groups"
  "re-find" -> "re-find"
  "re-find" -> "defn"
  "re-find" -> "when"
  "re-find" -> "find"
  "bit-not" -> "bit-not"
  "bit-not" -> "defn"
  "bit-not" -> "not"
  "construct-proxy" -> "construct-proxy"
  "construct-proxy" -> "defn"
  "construct-proxy" -> "to-array"
  "ref-min-history" -> "ref"
  "ref-min-history" -> "ref-min-history"
  "ref-min-history" -> "defn"
  "destructure" -> "val"
  "destructure" -> "gensym"
  "destructure" -> "second"
  "destructure" -> "cond"
  "destructure" -> "fn"
  "destructure" -> "let"
  "destructure" -> "symbol?"
  "destructure" -> "loop"
  "destructure" -> "next"
  "destructure" -> "with-meta"
  "destructure" -> "seq?"
  "destructure" -> "concat"
  "destructure" -> "conj"
  "destructure" -> "assoc"
  "destructure" -> "vector?"
  "destructure" -> "map"
  "destructure" -> "inc"
  "destructure" -> "destructure"
  "destructure" -> "seq"
  "destructure" -> "key"
  "destructure" -> "reduce1"
  "destructure" -> "nnext"
  "destructure" -> "defn"
  "destructure" -> "map?"
  "destructure" -> "nth"
  "destructure" -> "->"
  "destructure" -> "str"
  "destructure" -> "first"
  "destructure" -> "="
  "destructure" -> "get"
  "destructure" -> "pmap"
  "destructure" -> "partition"
  "destructure" -> "contains?"
  "destructure" -> "nthnext"
  "destructure" -> "list"
  "destructure" -> "every?"
  "destructure" -> "dissoc"
  "seq" -> "fn"
  "seq" -> "seq"
  "intern" -> "val"
  "intern" -> "the-ns"
  "intern" -> "let"
  "intern" -> "intern"
  "intern" -> "ns"
  "intern" -> "name"
  "intern" -> "defn"
  "intern" -> "when"
  "intern" -> "meta"
  "unchecked-multiply-int" -> "unchecked-multiply-int"
  "unchecked-multiply-int" -> "defn"
  "pvalues" -> "fn"
  "pvalues" -> "concat"
  "pvalues" -> "map"
  "pvalues" -> "seq"
  "pvalues" -> "pvalues"
  "pvalues" -> "defmacro"
  "pvalues" -> "pcalls"
  "pvalues" -> "list"
  "add-annotations" -> "process-annotation"
  "add-annotations" -> "is-annotation?"
  "add-annotations" -> "doseq"
  "add-annotations" -> "let"
  "add-annotations" -> "symbol?"
  "add-annotations" -> "defn-"
  "add-annotations" -> "add-annotations"
  "add-annotations" -> "when-let"
  "add-annotations" -> "is-runtime-annotation?"
  "add-annotations" -> "resolve"
  "add-annotations" -> "descriptor"
  "add-annotations" -> "when"
  "to-array-2d" -> "let"
  "to-array-2d" -> "loop"
  "to-array-2d" -> "next"
  "to-array-2d" -> "inc"
  "to-array-2d" -> "seq"
  "to-array-2d" -> "to-array-2d"
  "to-array-2d" -> "aset"
  "to-array-2d" -> "defn"
  "to-array-2d" -> "first"
  "to-array-2d" -> "when"
  "to-array-2d" -> "make-array"
  "to-array-2d" -> "to-array"
  "sorted-map-by" -> "sorted-map-by"
  "sorted-map-by" -> "defn"
  "sorted-map-by" -> "comparator"
  "filter" -> "chunked-seq?"
  "filter" -> "chunk-buffer"
  "filter" -> "let"
  "filter" -> "dotimes"
  "filter" -> "chunk-cons"
  "filter" -> "chunk-append"
  "filter" -> "seq"
  "filter" -> "filter"
  "filter" -> "defn"
  "filter" -> "chunk-rest"
  "filter" -> "count"
  "filter" -> "when-let"
  "filter" -> "cons"
  "filter" -> "first"
  "filter" -> "chunk"
  "filter" -> "rest"
  "filter" -> "lazy-seq"
  "filter" -> "when"
  "filter" -> "chunk-first"
  "->VecNode" -> "deftype"
  "*verbose-defrecords*" -> "*verbose-defrecords*"
  "assert-valid-fdecl" -> "let"
  "assert-valid-fdecl" -> "seq?"
  "assert-valid-fdecl" -> "vector?"
  "assert-valid-fdecl" -> "map"
  "assert-valid-fdecl" -> "defn-"
  "assert-valid-fdecl" -> "seq"
  "assert-valid-fdecl" -> "assert-valid-fdecl"
  "assert-valid-fdecl" -> "empty?"
  "assert-valid-fdecl" -> "str"
  "assert-valid-fdecl" -> "first"
  "assert-valid-fdecl" -> "when"
  "assert-valid-fdecl" -> "remove"
  "*clojure-version*" -> "*clojure-version*"
  "*clojure-version*" -> "clojure-version"
  "var?" -> "instance?"
  "var?" -> "var?"
  "var?" -> "defn"
  "alter-meta!" -> "alter-meta!"
  "alter-meta!" -> "defn"
  "unchecked-dec-int" -> "unchecked-dec-int"
  "unchecked-dec-int" -> "defn"
  "print-object" -> "defn-"
  "print-object" -> "print-object"
  "print-object" -> "class"
  "print-object" -> "str"
  "comment" -> "comment"
  "comment" -> "defmacro"
  "key" -> "key"
  "key" -> "defn"
  "class" -> "nil?"
  "class" -> "class"
  "class" -> "defn"
  "re-seq" -> "fn"
  "re-seq" -> "let"
  "re-seq" -> "re-matcher"
  "re-seq" -> "re-groups"
  "re-seq" -> "re-seq"
  "re-seq" -> "defn"
  "re-seq" -> "cons"
  "re-seq" -> "lazy-seq"
  "re-seq" -> "when"
  "re-seq" -> "find"
  "-cache-protocol-fn" -> "nil?"
  "-cache-protocol-fn" -> "find-protocol-method"
  "-cache-protocol-fn" -> "let"
  "-cache-protocol-fn" -> "when-not"
  "-cache-protocol-fn" -> "class"
  "-cache-protocol-fn" -> "-cache-protocol-fn"
  "-cache-protocol-fn" -> "expand-method-impl-cache"
  "-cache-protocol-fn" -> "defn"
  "-cache-protocol-fn" -> "str"
  "ns" -> "list*"
  "ns" -> "not="
  "ns" -> "string?"
  "ns" -> "fn"
  "ns" -> "dosync"
  "ns" -> "let"
  "ns" -> "commute"
  "ns" -> "next"
  "ns" -> "symbol"
  "ns" -> "deref"
  "ns" -> "vary-meta"
  "ns" -> "with-loading-context"
  "ns" -> "concat"
  "ns" -> "conj"
  "ns" -> "assoc"
  "ns" -> "map"
  "ns" -> "seq"
  "ns" -> "filter"
  "ns" -> "ns"
  "ns" -> "name"
  "ns" -> "not-any?"
  "ns" -> "map?"
  "ns" -> "str"
  "ns" -> "first"
  "ns" -> "="
  "ns" -> "defmacro"
  "ns" -> "and"
  "ns" -> "refer"
  "ns" -> "in-ns"
  "ns" -> "gen-class"
  "ns" -> "when"
  "ns" -> "remove"
  "ns" -> "list"
  "ns" -> "merge"
  "empty?" -> "seq"
  "empty?" -> "empty?"
  "empty?" -> "defn"
  "empty?" -> "not"
  "test" -> "let"
  "test" -> "test"
  "test" -> "defn"
  "test" -> "meta"
  "print-dup" -> "fn"
  "print-dup" -> "class"
  "print-dup" -> "print-dup"
  "print-dup" -> "defmulti"
  "create-ns" -> "create-ns"
  "create-ns" -> "defn"
  "merge-hash-collisions" -> "=="
  "merge-hash-collisions" -> "second"
  "merge-hash-collisions" -> "keys"
  "merge-hash-collisions" -> "fn"
  "merge-hash-collisions" -> "let"
  "merge-hash-collisions" -> "loop"
  "merge-hash-collisions" -> "next"
  "merge-hash-collisions" -> "vals"
  "merge-hash-collisions" -> "->>"
  "merge-hash-collisions" -> "concat"
  "merge-hash-collisions" -> "update-in"
  "merge-hash-collisions" -> "conj"
  "merge-hash-collisions" -> "assoc"
  "merge-hash-collisions" -> "map"
  "merge-hash-collisions" -> "defn-"
  "merge-hash-collisions" -> "seq"
  "merge-hash-collisions" -> "filter"
  "merge-hash-collisions" -> "merge-hash-collisions"
  "merge-hash-collisions" -> "reduce1"
  "merge-hash-collisions" -> "ffirst"
  "merge-hash-collisions" -> "hash"
  "merge-hash-collisions" -> "condp"
  "merge-hash-collisions" -> "count"
  "merge-hash-collisions" -> "<"
  "merge-hash-collisions" -> "first"
  "merge-hash-collisions" -> "="
  "merge-hash-collisions" -> "fnil"
  "merge-hash-collisions" -> "and"
  "merge-hash-collisions" -> "apply"
  "merge-hash-collisions" -> "into1"
  "merge-hash-collisions" -> "list"
  "generate-interface" -> "asm-type"
  "generate-interface" -> "doseq"
  "generate-interface" -> "some"
  "generate-interface" -> "let"
  "generate-interface" -> "dotimes"
  "generate-interface" -> "+"
  "generate-interface" -> "into-array"
  "generate-interface" -> "map"
  "generate-interface" -> "defn-"
  "generate-interface" -> "seq"
  "generate-interface" -> "add-annotations"
  "generate-interface" -> "generate-interface"
  "generate-interface" -> "name"
  "generate-interface" -> "count"
  "generate-interface" -> "nth"
  "generate-interface" -> "->"
  "generate-interface" -> "str"
  "generate-interface" -> "first"
  "generate-interface" -> "methods"
  "generate-interface" -> "when"
  "generate-interface" -> "make-array"
  "generate-interface" -> "meta"
  "name" -> "string?"
  "name" -> "name"
  "name" -> "defn"
  "list?" -> "instance?"
  "list?" -> "list?"
  "list?" -> "defn"
  "reduce1" -> "val"
  "reduce1" -> "chunked-seq?"
  "reduce1" -> "let"
  "reduce1" -> "next"
  "reduce1" -> "seq"
  "reduce1" -> "reduce1"
  "reduce1" -> "defn"
  "reduce1" -> "first"
  "reduce1" -> "chunk-first"
  "reduce1" -> "chunk-next"
  "global-hierarchy" -> "make-hierarchy"
  "global-hierarchy" -> "global-hierarchy"
  "escape-class-name" -> ".."
  "escape-class-name" -> "defn-"
  "escape-class-name" -> "escape-class-name"
  "escape-class-name" -> "replace"
  "nthrest" -> "loop"
  "nthrest" -> "seq"
  "nthrest" -> "nthrest"
  "nthrest" -> "defn"
  "nthrest" -> "pos?"
  "nthrest" -> "and"
  "nthrest" -> "rest"
  "nthrest" -> "dec"
  "nary-inline" -> "fn"
  "nary-inline" -> "let"
  "nary-inline" -> "*unchecked-math*"
  "nary-inline" -> "concat"
  "nary-inline" -> "seq"
  "nary-inline" -> "reduce1"
  "nary-inline" -> "nary-inline"
  "nary-inline" -> "defn"
  "nary-inline" -> "list"
  "aset" -> "val"
  "aset" -> "aset"
  "aset" -> "defn"
  "aset" -> "set"
  "aset" -> "array"
  "aset" -> "apply"
  "aset" -> "aget"
  "nnext" -> "fn"
  "nnext" -> "next"
  "nnext" -> "nnext"
  "doall" -> "dorun"
  "doall" -> "doall"
  "doall" -> "defn"
  "extenders" -> "keys"
  "extenders" -> "extenders"
  "extenders" -> "defn"
  "data-reader-urls" -> ".."
  "data-reader-urls" -> "defn-"
  "data-reader-urls" -> "data-reader-urls"
  "data-reader-urls" -> "enumeration-seq"
  "macroexpand-1" -> "macroexpand-1"
  "macroexpand-1" -> "defn"
  "not-any?" -> "some"
  "not-any?" -> "not-any?"
  "not-any?" -> "comp"
  "not-any?" -> "not"
  "resultset-seq" -> "keys"
  "resultset-seq" -> "fn"
  "resultset-seq" -> "let"
  "resultset-seq" -> "next"
  "resultset-seq" -> "distinct?"
  "resultset-seq" -> "create-struct"
  "resultset-seq" -> "map"
  "resultset-seq" -> "inc"
  "resultset-seq" -> "resultset-seq"
  "resultset-seq" -> "or"
  "resultset-seq" -> "defn"
  "resultset-seq" -> "comp"
  "resultset-seq" -> "cons"
  "resultset-seq" -> "range"
  "resultset-seq" -> "apply"
  "resultset-seq" -> "keyword"
  "resultset-seq" -> "struct"
  "resultset-seq" -> "lazy-seq"
  "resultset-seq" -> "when"
  "reductions" -> "seq"
  "reductions" -> "reductions"
  "reductions" -> "defn"
  "reductions" -> "when-let"
  "reductions" -> "cons"
  "reductions" -> "first"
  "reductions" -> "if-let"
  "reductions" -> "rest"
  "reductions" -> "lazy-seq"
  "reductions" -> "list"
  "pr-on" -> "print-dup"
  "pr-on" -> "pr-on"
  "pr-on" -> "defn"
  "pr-on" -> "print-method"
  "pr-on" -> "*print-dup*"
  "into" -> "instance?"
  "into" -> "with-meta"
  "into" -> "conj"
  "into" -> "conj!"
  "into" -> "into"
  "into" -> "transient"
  "into" -> "defn"
  "into" -> "reduce"
  "into" -> "persistent!"
  "into" -> "meta"
  "with-precision" -> "second"
  "with-precision" -> "let"
  "with-precision" -> "next"
  "with-precision" -> "*math-context*"
  "with-precision" -> "concat"
  "with-precision" -> "vector"
  "with-precision" -> "seq"
  "with-precision" -> "with-precision"
  "with-precision" -> "first"
  "with-precision" -> "="
  "with-precision" -> "defmacro"
  "with-precision" -> "apply"
  "with-precision" -> "list"
  "with-precision" -> "binding"
  "transient" -> "transient"
  "transient" -> "defn"
  "filter-key" -> "val"
  "filter-key" -> "loop"
  "filter-key" -> "next"
  "filter-key" -> "assoc"
  "filter-key" -> "seq"
  "filter-key" -> "key"
  "filter-key" -> "filter-key"
  "filter-key" -> "defn"
  "filter-key" -> "amap"
  "filter-key" -> "first"
  "ffirst" -> "fn"
  "ffirst" -> "ffirst"
  "ffirst" -> "first"
  "bit-clear" -> "bit-clear"
  "bit-clear" -> "defn"
  "proxy-name" -> "repeat"
  "proxy-name" -> "let"
  "proxy-name" -> "*ns*"
  "proxy-name" -> "concat"
  "proxy-name" -> "map"
  "proxy-name" -> "inc"
  "proxy-name" -> "proxy-name"
  "proxy-name" -> "hash"
  "proxy-name" -> "defn"
  "proxy-name" -> "interleave"
  "proxy-name" -> "str"
  "proxy-name" -> "subs"
  "proxy-name" -> "apply"
  "proxy-name" -> "into1"
  "proxy-name" -> "sorted-set"
  "extend-type" -> "emit-extend-type"
  "extend-type" -> "extend-type"
  "extend-type" -> "defmacro"
  "load-reader" -> "load-reader"
  "load-reader" -> "defn"
  "load-reader" -> "load"
  "with-redefs-fn" -> "doseq"
  "with-redefs-fn" -> "keys"
  "with-redefs-fn" -> "fn"
  "with-redefs-fn" -> "zipmap"
  "with-redefs-fn" -> "let"
  "with-redefs-fn" -> "map"
  "with-redefs-fn" -> "with-redefs-fn"
  "with-redefs-fn" -> "defn"
  "or" -> "let"
  "or" -> "next"
  "or" -> "concat"
  "or" -> "vector"
  "or" -> "seq"
  "or" -> "or"
  "or" -> "defmacro"
  "or" -> "apply"
  "or" -> "list"
  "hash" -> "hash"
  "hash" -> "defn"
  "as->" -> "repeat"
  "as->" -> "let"
  "as->" -> "concat"
  "as->" -> "vector"
  "as->" -> "seq"
  "as->" -> "name"
  "as->" -> "as->"
  "as->" -> "interleave"
  "as->" -> "defmacro"
  "as->" -> "apply"
  "as->" -> "list"
  "inc'" -> "inc'"
  "inc'" -> "defn"
  "print-initialized" -> "print-initialized"
  "expand-method-impl-cache" -> "nil?"
  "expand-method-impl-cache" -> "keys"
  "expand-method-impl-cache" -> "fn"
  "expand-method-impl-cache" -> "let"
  "expand-method-impl-cache" -> "*"
  "expand-method-impl-cache" -> "vec"
  "expand-method-impl-cache" -> "assoc"
  "expand-method-impl-cache" -> "map"
  "expand-method-impl-cache" -> "inc"
  "expand-method-impl-cache" -> "defn-"
  "expand-method-impl-cache" -> "reduce1"
  "expand-method-impl-cache" -> "aset"
  "expand-method-impl-cache" -> "hash"
  "expand-method-impl-cache" -> "expand-method-impl-cache"
  "expand-method-impl-cache" -> "if-let"
  "expand-method-impl-cache" -> "partition"
  "expand-method-impl-cache" -> "shift-mask"
  "expand-method-impl-cache" -> "maybe-min-hash"
  "expand-method-impl-cache" -> "int"
  "expand-method-impl-cache" -> "into1"
  "expand-method-impl-cache" -> "make-array"
  "expand-method-impl-cache" -> "remove"
  "print-ctor" -> "class"
  "print-ctor" -> "print-ctor"
  "print-ctor" -> "defn"
  "associative?" -> "instance?"
  "associative?" -> "associative?"
  "associative?" -> "defn"
  "float?" -> "instance?"
  "float?" -> "or"
  "float?" -> "float?"
  "float?" -> "defn"
  "drop-last" -> "fn"
  "drop-last" -> "map"
  "drop-last" -> "drop-last"
  "drop-last" -> "defn"
  "drop-last" -> "drop"
  "replace" -> "val"
  "replace" -> "fn"
  "replace" -> "assoc"
  "replace" -> "vector?"
  "replace" -> "map"
  "replace" -> "reduce1"
  "replace" -> "replace"
  "replace" -> "defn"
  "replace" -> "count"
  "replace" -> "nth"
  "replace" -> "range"
  "replace" -> "if-let"
  "replace" -> "find"
  "decimal?" -> "instance?"
  "decimal?" -> "decimal?"
  "decimal?" -> "defn"
  "defn" -> "instance?"
  "defn" -> "string?"
  "defn" -> "second"
  "defn" -> "fn"
  "defn" -> "let"
  "defn" -> "next"
  "defn" -> "last"
  "defn" -> "with-meta"
  "defn" -> "butlast"
  "defn" -> "conj"
  "defn" -> "assoc"
  "defn" -> "vector?"
  "defn" -> "name"
  "defn" -> "defn"
  "defn" -> "map?"
  "defn" -> "cons"
  "defn" -> "first"
  "defn" -> "list"
  "defn" -> "meta"
  "parents" -> "let"
  "parents" -> "bases"
  "parents" -> "class?"
  "parents" -> "global-hierarchy"
  "parents" -> "defn"
  "parents" -> "parents"
  "parents" -> "set"
  "parents" -> "get"
  "parents" -> "into1"
  "parents" -> "not-empty"
  "map?" -> "instance?"
  "map?" -> "fn"
  "map?" -> "map?"
  "prefers" -> "defn"
  "prefers" -> "prefers"
  "numerator" -> "defn"
  "numerator" -> "numerator"
  "condp" -> "gensym"
  "condp" -> "second"
  "condp" -> "cond"
  "condp" -> "fn"
  "condp" -> "let"
  "condp" -> "concat"
  "condp" -> "vector"
  "condp" -> "split-at"
  "condp" -> "seq"
  "condp" -> "condp"
  "condp" -> "count"
  "condp" -> "str"
  "condp" -> "="
  "condp" -> "defmacro"
  "condp" -> "if-let"
  "condp" -> "apply"
  "condp" -> "list"
  "quot" -> "defn"
  "quot" -> "quot"
  "quot" -> "num"
  "chunk-rest" -> "defn"
  "chunk-rest" -> "chunk-rest"
  "unchecked-negate-int" -> "defn"
  "unchecked-negate-int" -> "unchecked-negate-int"
  "file-seq" -> "fn"
  "file-seq" -> "seq"
  "file-seq" -> "defn"
  "file-seq" -> "file-seq"
  "file-seq" -> "tree-seq"
  "send" -> "send-via"
  "send" -> "defn"
  "send" -> "send"
  "send" -> "apply"
  "with-local-vars" -> "repeat"
  "with-local-vars" -> "let"
  "with-local-vars" -> ".."
  "with-local-vars" -> "concat"
  "with-local-vars" -> "vector"
  "with-local-vars" -> "vector?"
  "with-local-vars" -> "seq"
  "with-local-vars" -> "with-local-vars"
  "with-local-vars" -> "count"
  "with-local-vars" -> "interleave"
  "with-local-vars" -> "defmacro"
  "with-local-vars" -> "even?"
  "with-local-vars" -> "apply"
  "with-local-vars" -> "take-nth"
  "with-local-vars" -> "hash-map"
  "with-local-vars" -> "list"
  "with-local-vars" -> "assert-args"
  "reverse" -> "conj"
  "reverse" -> "reduce1"
  "reverse" -> "defn"
  "reverse" -> "reverse"
  "validate-generate-class-options" -> "let"
  "validate-generate-class-options" -> "valid-java-method-name"
  "validate-generate-class-options" -> "map"
  "validate-generate-class-options" -> "defn-"
  "validate-generate-class-options" -> "validate-generate-class-options"
  "validate-generate-class-options" -> "comp"
  "validate-generate-class-options" -> "str"
  "validate-generate-class-options" -> "first"
  "validate-generate-class-options" -> "methods"
  "validate-generate-class-options" -> "when"
  "validate-generate-class-options" -> "remove"
  "with-bindings" -> "fn"
  "with-bindings" -> "concat"
  "with-bindings" -> "vector"
  "with-bindings" -> "with-bindings*"
  "with-bindings" -> "seq"
  "with-bindings" -> "with-bindings"
  "with-bindings" -> "defmacro"
  "with-bindings" -> "apply"
  "with-bindings" -> "list"
  "count" -> "defn"
  "count" -> "count"
  "get-proxy-class" -> "let"
  "get-proxy-class" -> "deref"
  "get-proxy-class" -> "generate-proxy"
  "get-proxy-class" -> "bases"
  "get-proxy-class" -> "proxy-name"
  "get-proxy-class" -> "or"
  "get-proxy-class" -> "defn"
  "get-proxy-class" -> "get-proxy-class"
  "get-proxy-class" -> "get-super-and-interfaces"
  "set" -> "seq"
  "set" -> "defn"
  "set" -> "set"
  "ex-info" -> "map"
  "ex-info" -> "defn"
  "ex-info" -> "ex-info"
  "unchecked-subtract-int" -> "defn"
  "unchecked-subtract-int" -> "unchecked-subtract-int"
  "when-let" -> "let"
  "when-let" -> "concat"
  "when-let" -> "vector"
  "when-let" -> "vector?"
  "when-let" -> "seq"
  "when-let" -> "count"
  "when-let" -> "when-let"
  "when-let" -> "="
  "when-let" -> "defmacro"
  "when-let" -> "apply"
  "when-let" -> "when"
  "when-let" -> "list"
  "when-let" -> "assert-args"
  "comp" -> "list*"
  "comp" -> "fn"
  "comp" -> "let"
  "comp" -> "loop"
  "comp" -> "next"
  "comp" -> "defn"
  "comp" -> "reverse"
  "comp" -> "comp"
  "comp" -> "first"
  "comp" -> "identity"
  "comp" -> "apply"
  "nth" -> "defn"
  "nth" -> "nth"
  "byte" -> "defn"
  "byte" -> "byte"
  "dissoc!" -> "let"
  "dissoc!" -> "next"
  "dissoc!" -> "map"
  "dissoc!" -> "key"
  "dissoc!" -> "defn"
  "dissoc!" -> "dissoc!"
  "dissoc!" -> "first"
  "implements?" -> "defn-"
  "implements?" -> "implements?"
  "implements?" -> "and"
  "constantly" -> "fn"
  "constantly" -> "defn"
  "constantly" -> "constantly"
  "load" -> "doseq"
  "load" -> "let"
  "load" -> "*ns*"
  "load" -> "when-not"
  "load" -> "conj"
  "load" -> "root-directory"
  "load" -> "ns-name"
  "load" -> "defn"
  "load" -> "load"
  "load" -> "str"
  "load" -> "first"
  "load" -> "="
  "load" -> "check-cyclic-dependency"
  "load" -> "printf"
  "load" -> "*loading-verbosely*"
  "load" -> "*pending-paths*"
  "load" -> "when"
  "load" -> "flush"
  "load" -> "binding"
  "namespace" -> "defn"
  "namespace" -> "namespace"
  "pr-str" -> "with-out-str"
  "pr-str" -> "defn"
  "pr-str" -> "pr-str"
  "pr-str" -> "apply"
  "pr-str" -> "pr"
  "<" -> "next"
  "<" -> "defn"
  "<" -> "<"
  "<" -> "first"
  "rationalize" -> "defn"
  "rationalize" -> "rationalize"
  "rationalize" -> "num"
  "sort-by" -> "fn"
  "sort-by" -> "defn"
  "sort-by" -> "comp"
  "sort-by" -> "sort-by"
  "sort-by" -> "compare"
  "sort-by" -> "sort"
  "->VecSeq" -> "val"
  "->VecSeq" -> "instance?"
  "->VecSeq" -> "empty"
  "->VecSeq" -> "nil?"
  "->VecSeq" -> "cond"
  "->VecSeq" -> "let"
  "->VecSeq" -> "loop"
  "->VecSeq" -> "next"
  "->VecSeq" -> "+"
  "->VecSeq" -> "identical?"
  "->VecSeq" -> "bit-and"
  "->VecSeq" -> "vec"
  "->VecSeq" -> "inc"
  "->VecSeq" -> "seq"
  "->VecSeq" -> "or"
  "->VecSeq" -> "count"
  "->VecSeq" -> "<"
  "->VecSeq" -> "cons"
  "->VecSeq" -> "first"
  "->VecSeq" -> "deftype"
  "->VecSeq" -> "and"
  "->VecSeq" -> "when"
  "cycle" -> "concat"
  "cycle" -> "seq"
  "cycle" -> "defn"
  "cycle" -> "when-let"
  "cycle" -> "cycle"
  "cycle" -> "lazy-seq"
  "peek" -> "defn"
  "peek" -> "peek"
  "denominator" -> "defn"
  "denominator" -> "denominator"
  "find-field" -> "let"
  "find-field" -> "loop"
  "find-field" -> "defn-"
  "find-field" -> "filter"
  "find-field" -> "or"
  "find-field" -> "find-field"
  "find-field" -> "str"
  "find-field" -> "first"
  "find-field" -> "="
  "most-specific" -> "some"
  "most-specific" -> "fn"
  "most-specific" -> "isa?"
  "most-specific" -> "defn-"
  "most-specific" -> "or"
  "most-specific" -> "most-specific"
  "most-specific" -> "when"
  "most-specific" -> "every?"
  "reduce" -> "val"
  "reduce" -> "defn"
  "reduce" -> "reduce"
  "reduce" -> "coll-reduce"
  "interleave" -> "let"
  "interleave" -> "concat"
  "interleave" -> "conj"
  "interleave" -> "map"
  "interleave" -> "seq"
  "interleave" -> "defn"
  "interleave" -> "interleave"
  "interleave" -> "cons"
  "interleave" -> "first"
  "interleave" -> "identity"
  "interleave" -> "and"
  "interleave" -> "apply"
  "interleave" -> "rest"
  "interleave" -> "lazy-seq"
  "interleave" -> "when"
  "interleave" -> "every?"
  "print-map" -> "val"
  "print-map" -> "fn"
  "print-map" -> "defn-"
  "print-map" -> "seq"
  "print-map" -> "key"
  "print-map" -> "print-map"
  "print-map" -> "print-sequential"
  "amap" -> "let"
  "amap" -> "loop"
  "amap" -> "unchecked-inc"
  "amap" -> "concat"
  "amap" -> "vector"
  "amap" -> "seq"
  "amap" -> "aset"
  "amap" -> "<"
  "amap" -> "amap"
  "amap" -> "defmacro"
  "amap" -> "apply"
  "amap" -> "aclone"
  "amap" -> "alength"
  "amap" -> "list"
  "->" -> "next"
  "->" -> "with-meta"
  "->" -> "seq?"
  "->" -> "concat"
  "->" -> "seq"
  "->" -> "->"
  "->" -> "first"
  "->" -> "defmacro"
  "->" -> "list"
  "->" -> "meta"
  "cons" -> "seq"
  "cons" -> "cons"
  "macroexpand" -> "let"
  "macroexpand" -> "identical?"
  "macroexpand" -> "macroexpand-1"
  "macroexpand" -> "defn"
  "macroexpand" -> "macroexpand"
  "ctor-sigs" -> "for"
  "ctor-sigs" -> "vector"
  "ctor-sigs" -> "defn-"
  "ctor-sigs" -> "ctor-sigs"
  "ctor-sigs" -> "apply"
  "ctor-sigs" -> "not"
  "var-set" -> "val"
  "var-set" -> "defn"
  "var-set" -> "set"
  "var-set" -> "var-set"
  "add-annotation" -> "process-annotation"
  "add-annotation" -> "instance?"
  "add-annotation" -> "doseq"
  "add-annotation" -> "cond"
  "add-annotation" -> "let"
  "add-annotation" -> "symbol?"
  "add-annotation" -> "seq?"
  "add-annotation" -> "vector?"
  "add-annotation" -> "class?"
  "add-annotation" -> "defn-"
  "add-annotation" -> "class"
  "add-annotation" -> "name"
  "add-annotation" -> "add-annotation"
  "add-annotation" -> "str"
  "add-annotation" -> "resolve"
  "add-annotation" -> "descriptor"
  "add-annotation" -> "eval"
  "str" -> "nil?"
  "str" -> "fn"
  "str" -> "next"
  "str" -> "defn"
  "str" -> "str"
  "str" -> "first"
  "aset-boolean" -> "def-aset"
  "aset-boolean" -> "boolean"
  "aset-boolean" -> "aset-boolean"
  "ns-imports" -> "val"
  "ns-imports" -> "instance?"
  "ns-imports" -> "ns"
  "ns-imports" -> "filter-key"
  "ns-imports" -> "defn"
  "ns-imports" -> "ns-imports"
  "ns-imports" -> "partial"
  "ns-imports" -> "ns-map"
  "while" -> "loop"
  "while" -> "concat"
  "while" -> "vector"
  "while" -> "seq"
  "while" -> "test"
  "while" -> "while"
  "while" -> "defmacro"
  "while" -> "apply"
  "while" -> "when"
  "while" -> "list"
  "remove-all-methods" -> "defn"
  "remove-all-methods" -> "remove-all-methods"
  "first" -> "fn"
  "first" -> "first"
  "bean" -> "val"
  "bean" -> "keys"
  "bean" -> "fn"
  "bean" -> "let"
  "bean" -> ".."
  "bean" -> "zero?"
  "bean" -> "conj"
  "bean" -> "assoc"
  "bean" -> "seq"
  "bean" -> "key"
  "bean" -> "name"
  "bean" -> "reduce1"
  "bean" -> "defn"
  "bean" -> "count"
  "bean" -> "when-let"
  "bean" -> "cons"
  "bean" -> "first"
  "bean" -> "bean"
  "bean" -> "pmap"
  "bean" -> "and"
  "bean" -> "contains?"
  "bean" -> "proxy"
  "bean" -> "rest"
  "bean" -> "keyword"
  "bean" -> "lazy-seq"
  "bean" -> "when"
  "bean" -> "alength"
  "bean" -> "dissoc"
  "=" -> "next"
  "=" -> "defn"
  "=" -> "first"
  "=" -> "="
  "memoize" -> "val"
  "memoize" -> "fn"
  "memoize" -> "let"
  "memoize" -> "deref"
  "memoize" -> "assoc"
  "memoize" -> "defn"
  "memoize" -> "memoize"
  "memoize" -> "if-let"
  "memoize" -> "apply"
  "memoize" -> "swap!"
  "memoize" -> "atom"
  "memoize" -> "find"
  "max-switch-table-size" -> "max-switch-table-size"
  "max-switch-table-size" -> "bit-shift-left"
  "max-switch-table-size" -> "max-mask-bits"
  "var-get" -> "defn"
  "var-get" -> "var-get"
  "var-get" -> "get"
  "unchecked-float" -> "defn"
  "unchecked-float" -> "unchecked-float"
  "range" -> "chunk-buffer"
  "range" -> "let"
  "range" -> "loop"
  "range" -> "+"
  "range" -> "chunk-cons"
  "range" -> "chunk-append"
  "range" -> "defn"
  "range" -> "count"
  "range" -> "comp"
  "range" -> "<"
  "range" -> "range"
  "range" -> ">"
  "range" -> "pos?"
  "range" -> "and"
  "range" -> "chunk"
  "range" -> "lazy-seq"
  "range" -> "when"
  "tree-seq" -> "fn"
  "tree-seq" -> "let"
  "tree-seq" -> "mapcat"
  "tree-seq" -> "defn"
  "tree-seq" -> "cons"
  "tree-seq" -> "tree-seq"
  "tree-seq" -> "lazy-seq"
  "tree-seq" -> "when"
  "defmacro" -> "nil?"
  "defmacro" -> "string?"
  "defmacro" -> "fn"
  "defmacro" -> "let"
  "defmacro" -> "loop"
  "defmacro" -> "next"
  "defmacro" -> "vec"
  "defmacro" -> "conj"
  "defmacro" -> "vector?"
  "defmacro" -> "seq"
  "defmacro" -> "name"
  "defmacro" -> "defn"
  "defmacro" -> "map?"
  "defmacro" -> "cons"
  "defmacro" -> "first"
  "defmacro" -> "defmacro"
  "defmacro" -> "list"
  "set-validator!" -> "defn"
  "set-validator!" -> "set-validator!"
  "aset-double" -> "def-aset"
  "aset-double" -> "aset-double"
  "aset-double" -> "double"
  "check-cyclic-dependency" -> "some"
  "check-cyclic-dependency" -> "let"
  "check-cyclic-dependency" -> "map"
  "check-cyclic-dependency" -> "defn-"
  "check-cyclic-dependency" -> "cons"
  "check-cyclic-dependency" -> "str"
  "check-cyclic-dependency" -> "="
  "check-cyclic-dependency" -> "check-cyclic-dependency"
  "check-cyclic-dependency" -> "interpose"
  "check-cyclic-dependency" -> "apply"
  "check-cyclic-dependency" -> "rest"
  "check-cyclic-dependency" -> "*pending-paths*"
  "check-cyclic-dependency" -> "when"
  "*'" -> "reduce1"
  "*'" -> "defn"
  "*'" -> "*'"
  "*'" -> "cast"
  "case" -> "keyword?"
  "case" -> "gensym"
  "case" -> "keys"
  "case" -> "cond"
  "case" -> "fn"
  "case" -> "let"
  "case" -> "odd?"
  "case" -> "vals"
  "case" -> "last"
  "case" -> "integer?"
  "case" -> "with-meta"
  "case" -> "seq?"
  "case" -> "concat"
  "case" -> "vector"
  "case" -> "assoc"
  "case" -> "prep-hashes"
  "case" -> "seq"
  "case" -> "test"
  "case" -> "reduce1"
  "case" -> "condp"
  "case" -> "count"
  "case" -> "str"
  "case" -> "="
  "case" -> "defmacro"
  "case" -> "case"
  "case" -> ">"
  "case" -> "<="
  "case" -> "and"
  "case" -> "partition"
  "case" -> "contains?"
  "case" -> "apply"
  "case" -> "list"
  "case" -> "every?"
  "case" -> "prep-ints"
  "unchecked-divide-int" -> "defn"
  "unchecked-divide-int" -> "unchecked-divide-int"
  "emit-impl" -> "fn"
  "emit-impl" -> "zipmap"
  "emit-impl" -> "map"
  "emit-impl" -> "defn-"
  "emit-impl" -> "->"
  "emit-impl" -> "cons"
  "emit-impl" -> "first"
  "emit-impl" -> "emit-impl"
  "emit-impl" -> "keyword"
  "emit-impl" -> "drop"
  "enumeration-seq" -> "defn"
  "enumeration-seq" -> "enumeration-seq"
  "prefer-method" -> "defn"
  "prefer-method" -> "prefer-method"
  "partition-all" -> "let"
  "partition-all" -> "seq"
  "partition-all" -> "nthrest"
  "partition-all" -> "doall"
  "partition-all" -> "defn"
  "partition-all" -> "when-let"
  "partition-all" -> "cons"
  "partition-all" -> "partition-all"
  "partition-all" -> "lazy-seq"
  "partition-all" -> "take"
  "ensure" -> "deref"
  "ensure" -> "ref"
  "ensure" -> "defn"
  "ensure" -> "ensure"
  "reduced" -> "defn"
  "reduced" -> "reduced"
  "find-ns" -> "defn"
  "find-ns" -> "find-ns"
  "not-every?" -> "comp"
  "not-every?" -> "not-every?"
  "not-every?" -> "every?"
  "not-every?" -> "not"
  "struct-map" -> "defn"
  "struct-map" -> "struct-map"
  ">" -> "next"
  ">" -> "defn"
  ">" -> "first"
  ">" -> ">"
  "max" -> "reduce1"
  "max" -> "defn"
  "max" -> "max"
  "proxy-mappings" -> "defn"
  "proxy-mappings" -> "proxy-mappings"
  "proxy-mappings" -> "proxy"
  "identity" -> "defn"
  "identity" -> "identity"
  "*loaded-libs*" -> "ref"
  "*loaded-libs*" -> "*loaded-libs*"
  "*loaded-libs*" -> "defonce"
  "*loaded-libs*" -> "sorted-set"
  "ints" -> "concat"
  "ints" -> "definline"
  "ints" -> "seq"
  "ints" -> "ints"
  "ints" -> "list"
  "fnext" -> "fn"
  "fnext" -> "next"
  "fnext" -> "first"
  "fnext" -> "fnext"
  "biginteger" -> "instance?"
  "biginteger" -> "cond"
  "biginteger" -> "long"
  "biginteger" -> "number?"
  "biginteger" -> "ratio?"
  "biginteger" -> "decimal?"
  "biginteger" -> "defn"
  "biginteger" -> "biginteger"
  "min-key" -> "reduce1"
  "min-key" -> "defn"
  "min-key" -> "<"
  "min-key" -> "min-key"
  "reset-meta!" -> "defn"
  "reset-meta!" -> "reset-meta!"
  "array" -> "into-array"
  "array" -> "defn"
  "array" -> "array"
  "push-thread-bindings" -> "defn"
  "push-thread-bindings" -> "push-thread-bindings"
  "unchecked-add-int" -> "defn"
  "unchecked-add-int" -> "unchecked-add-int"
  "subs" -> "defn"
  "subs" -> "subs"
  "compile" -> "load-one"
  "compile" -> "*compile-files*"
  "compile" -> "defn"
  "compile" -> "compile"
  "compile" -> "binding"
  "throw-if" -> "format"
  "throw-if" -> "not="
  "throw-if" -> "let"
  "throw-if" -> "into-array"
  "throw-if" -> "defn-"
  "throw-if" -> "throw-if"
  "throw-if" -> "apply"
  "throw-if" -> "drop"
  "throw-if" -> "when"
  "throw-if" -> "drop-while"
  "agent-errors" -> "agent-error"
  "agent-errors" -> "defn"
  "agent-errors" -> "when-let"
  "agent-errors" -> "agent-errors"
  "agent-errors" -> "list"
  "clear-agent-errors" -> "restart-agent"
  "clear-agent-errors" -> "defn"
  "clear-agent-errors" -> "clear-agent-errors"
  "printf" -> "format"
  "printf" -> "print"
  "printf" -> "defn"
  "printf" -> "printf"
  "printf" -> "apply"
  "overload-name" -> "repeat"
  "overload-name" -> "map"
  "overload-name" -> "defn-"
  "overload-name" -> "seq"
  "overload-name" -> "escape-class-name"
  "overload-name" -> "interleave"
  "overload-name" -> "str"
  "overload-name" -> "overload-name"
  "overload-name" -> "apply"
  "ns-resolve" -> "the-ns"
  "ns-resolve" -> "when-not"
  "ns-resolve" -> "ns"
  "ns-resolve" -> "defn"
  "ns-resolve" -> "ns-resolve"
  "ns-resolve" -> "contains?"
  "method-sig" -> "seq"
  "method-sig" -> "defn"
  "method-sig" -> "method-sig"
  "*default-data-reader-fn*" -> "*default-data-reader-fn*"
  ">=" -> "next"
  ">=" -> "defn"
  ">=" -> "first"
  ">=" -> ">="
  "assert-same-protocol" -> "not="
  "assert-same-protocol" -> "doseq"
  "assert-same-protocol" -> "let"
  "assert-same-protocol" -> "*out*"
  "assert-same-protocol" -> "defn-"
  "assert-same-protocol" -> "*err*"
  "assert-same-protocol" -> "str"
  "assert-same-protocol" -> "assert-same-protocol"
  "assert-same-protocol" -> "resolve"
  "assert-same-protocol" -> "bound?"
  "assert-same-protocol" -> "and"
  "assert-same-protocol" -> "println"
  "assert-same-protocol" -> "when"
  "assert-same-protocol" -> "binding"
  "assert-same-protocol" -> "meta"
  "shutdown-agents" -> "defn"
  "shutdown-agents" -> "shutdown-agents"
  "reduce-kv" -> "defn"
  "reduce-kv" -> "kv-reduce"
  "reduce-kv" -> "reduce-kv"
  "reset!" -> "defn"
  "reset!" -> "reset!"
  "reset!" -> "atom"
  "is-runtime-annotation?" -> "is-annotation?"
  "is-runtime-annotation?" -> "boolean"
  "is-runtime-annotation?" -> "defn-"
  "is-runtime-annotation?" -> "when-let"
  "is-runtime-annotation?" -> "="
  "is-runtime-annotation?" -> "is-runtime-annotation?"
  "is-runtime-annotation?" -> "and"
  "case-map" -> "sorted-map"
  "case-map" -> "zipmap"
  "case-map" -> "vector"
  "case-map" -> "map"
  "case-map" -> "defn-"
  "case-map" -> "case-map"
  "case-map" -> "into1"
  "even?" -> "integer?"
  "even?" -> "zero?"
  "even?" -> "bit-and"
  "even?" -> "defn"
  "even?" -> "str"
  "even?" -> "even?"
  "require" -> "load-libs"
  "require" -> "defn"
  "require" -> "require"
  "require" -> "apply"
  "bit-shift-left" -> "defn"
  "bit-shift-left" -> "bit-shift-left"
  "dec'" -> "defn"
  "dec'" -> "dec'"
  "methods" -> "defn"
  "methods" -> "methods"
  "future-cancelled?" -> "defn"
  "future-cancelled?" -> "future-cancelled?"
  "compare" -> "defn"
  "compare" -> "compare"
  "deftype" -> "let"
  "deftype" -> "*ns*"
  "deftype" -> "import"
  "deftype" -> "symbol"
  "deftype" -> "with-meta"
  "deftype" -> "vec"
  "deftype" -> "concat"
  "deftype" -> "vector"
  "deftype" -> "split-at"
  "deftype" -> "map"
  "deftype" -> "parse-opts+specs"
  "deftype" -> "build-positional-factory"
  "deftype" -> "seq"
  "deftype" -> "name"
  "deftype" -> "str"
  "deftype" -> "defmacro"
  "deftype" -> "methods"
  "deftype" -> "deftype"
  "deftype" -> "namespace-munge"
  "deftype" -> "apply"
  "deftype" -> "validate-fields"
  "deftype" -> "list"
  "deftype" -> "emit-deftype*"
  "sorted-set-by" -> "keys"
  "sorted-set-by" -> "defn"
  "sorted-set-by" -> "sorted-set-by"
  "sorted-set-by" -> "comparator"
  "cast" -> "defn"
  "cast" -> "cast"
  "namespace-munge" -> "ns"
  "namespace-munge" -> "defn"
  "namespace-munge" -> "str"
  "namespace-munge" -> "namespace-munge"
  "supers" -> "let"
  "supers" -> "loop"
  "supers" -> "bases"
  "supers" -> "seq"
  "supers" -> "class"
  "supers" -> "defn"
  "supers" -> "set"
  "supers" -> "first"
  "supers" -> "supers"
  "supers" -> "disj"
  "supers" -> "into1"
  "supers" -> "not-empty"
  "pcalls" -> "defn"
  "pcalls" -> "pcalls"
  "pcalls" -> "pmap"
  "load-string" -> "let"
  "load-string" -> "load-reader"
  "load-string" -> "defn"
  "load-string" -> "->"
  "load-string" -> "load-string"
  "group-by" -> "fn"
  "group-by" -> "let"
  "group-by" -> "assoc!"
  "group-by" -> "conj"
  "group-by" -> "transient"
  "group-by" -> "defn"
  "group-by" -> "reduce"
  "group-by" -> "group-by"
  "group-by" -> "get"
  "group-by" -> "persistent!"
  "get" -> "map"
  "get" -> "key"
  "get" -> "defn"
  "get" -> "get"
  "<=" -> "next"
  "<=" -> "defn"
  "<=" -> "first"
  "<=" -> "<="
  "await" -> "doseq"
  "await" -> "fn"
  "await" -> "let"
  "await" -> "defn"
  "await" -> "send"
  "await" -> "count"
  "await" -> "await"
  "await" -> "*agent*"
  "await" -> "io!"
  "await" -> "when"
  "await" -> "agent"
  "resolve" -> "*ns*"
  "resolve" -> "defn"
  "resolve" -> "ns-resolve"
  "resolve" -> "resolve"
  "bytes" -> "concat"
  "bytes" -> "definline"
  "bytes" -> "seq"
  "bytes" -> "bytes"
  "bytes" -> "list"
  "print-method" -> "keyword?"
  "print-method" -> "fn"
  "print-method" -> "let"
  "print-method" -> "class"
  "print-method" -> "get"
  "print-method" -> "print-method"
  "print-method" -> "defmulti"
  "print-method" -> "meta"
  "bound?" -> "defn"
  "bound?" -> "bound?"
  "bound?" -> "every?"
  "loaded-libs" -> "deref"
  "loaded-libs" -> "defn"
  "loaded-libs" -> "*loaded-libs*"
  "loaded-libs" -> "loaded-libs"
  "fnil" -> "nil?"
  "fnil" -> "fn"
  "fnil" -> "defn"
  "fnil" -> "fnil"
  "fnil" -> "apply"
  "force" -> "defn"
  "force" -> "force"
  "partial" -> "fn"
  "partial" -> "concat"
  "partial" -> "defn"
  "partial" -> "partial"
  "partial" -> "apply"
  ">1?" -> "defn"
  ">1?" -> ">1?"
  "pmap" -> "fn"
  "pmap" -> "let"
  "pmap" -> "deref"
  "pmap" -> "+"
  "pmap" -> ".."
  "pmap" -> "future"
  "pmap" -> "map"
  "pmap" -> "seq"
  "pmap" -> "defn"
  "pmap" -> "cons"
  "pmap" -> "first"
  "pmap" -> "identity"
  "pmap" -> "pmap"
  "pmap" -> "if-let"
  "pmap" -> "apply"
  "pmap" -> "rest"
  "pmap" -> "drop"
  "pmap" -> "lazy-seq"
  "pmap" -> "when"
  "pmap" -> "every?"
  "if-let" -> "nil?"
  "if-let" -> "let"
  "if-let" -> "concat"
  "if-let" -> "vector"
  "if-let" -> "vector?"
  "if-let" -> "seq"
  "if-let" -> "count"
  "if-let" -> "="
  "if-let" -> "defmacro"
  "if-let" -> "if-let"
  "if-let" -> "apply"
  "if-let" -> "list"
  "if-let" -> "assert-args"
  "comparator" -> "cond"
  "comparator" -> "fn"
  "comparator" -> "defn"
  "comparator" -> "comparator"
  "pos?" -> "defn"
  "pos?" -> "pos?"
  "prim->class" -> "prim->class"
  "char" -> "defn"
  "char" -> "char"
  "take-while" -> "seq"
  "take-while" -> "defn"
  "take-while" -> "when-let"
  "take-while" -> "cons"
  "take-while" -> "first"
  "take-while" -> "take-while"
  "take-while" -> "rest"
  "take-while" -> "lazy-seq"
  "take-while" -> "when"
  "*loading-verbosely*" -> "*loading-verbosely*"
  "*loading-verbosely*" -> "defonce"
  "extend-protocol" -> "emit-extend-protocol"
  "extend-protocol" -> "defmacro"
  "extend-protocol" -> "extend-protocol"
  "imap-cons" -> "instance?"
  "imap-cons" -> "cond"
  "imap-cons" -> "let"
  "imap-cons" -> "loop"
  "imap-cons" -> "vec"
  "imap-cons" -> "defn-"
  "imap-cons" -> "seq"
  "imap-cons" -> "first"
  "imap-cons" -> "imap-cons"
  "imap-cons" -> "rest"
  "and" -> "let"
  "and" -> "next"
  "and" -> "concat"
  "and" -> "vector"
  "and" -> "seq"
  "and" -> "defmacro"
  "and" -> "and"
  "and" -> "apply"
  "and" -> "list"
  "refer" -> "instance?"
  "refer" -> "doseq"
  "refer" -> "keys"
  "refer" -> "ns-publics"
  "refer" -> "let"
  "refer" -> "*ns*"
  "refer" -> "ns-interns"
  "refer" -> "when-not"
  "refer" -> "ns"
  "refer" -> "or"
  "refer" -> "defn"
  "refer" -> "set"
  "refer" -> "str"
  "refer" -> "="
  "refer" -> "find-ns"
  "refer" -> "get"
  "refer" -> "and"
  "refer" -> "refer"
  "refer" -> "apply"
  "refer" -> "when"
  "refer" -> "hash-map"
  "refer" -> "not"
  "underive" -> "val"
  "underive" -> "let"
  "underive" -> "derive"
  "underive" -> "make-hierarchy"
  "underive" -> "assoc"
  "underive" -> "map"
  "underive" -> "seq"
  "underive" -> "key"
  "underive" -> "reduce1"
  "underive" -> "global-hierarchy"
  "underive" -> "defn"
  "underive" -> "cons"
  "underive" -> "underive"
  "underive" -> "partition"
  "underive" -> "contains?"
  "underive" -> "interpose"
  "underive" -> "apply"
  "underive" -> "disj"
  "underive" -> "not-empty"
  "underive" -> "flatten"
  "underive" -> "dissoc"
  "underive" -> "alter-var-root"
  "iterator-seq" -> "defn"
  "iterator-seq" -> "iterator-seq"
  "declare" -> "vary-meta"
  "declare" -> "concat"
  "declare" -> "assoc"
  "declare" -> "map"
  "declare" -> "seq"
  "declare" -> "defmacro"
  "declare" -> "declare"
  "declare" -> "list"
  "ancestors" -> "let"
  "ancestors" -> "map"
  "ancestors" -> "class?"
  "ancestors" -> "reduce1"
  "ancestors" -> "global-hierarchy"
  "ancestors" -> "defn"
  "ancestors" -> "set"
  "ancestors" -> "cons"
  "ancestors" -> "supers"
  "ancestors" -> "get"
  "ancestors" -> "ancestors"
  "ancestors" -> "into1"
  "ancestors" -> "not-empty"
  "hash-combine" -> "defn"
  "hash-combine" -> "hash-combine"
  "persistent!" -> "defn"
  "persistent!" -> "persistent!"
  "locking" -> "let"
  "locking" -> "concat"
  "locking" -> "vector"
  "locking" -> "seq"
  "locking" -> "defmacro"
  "locking" -> "locking"
  "locking" -> "apply"
  "locking" -> "list"
  "partition" -> "let"
  "partition" -> "concat"
  "partition" -> "seq"
  "partition" -> "nthrest"
  "partition" -> "doall"
  "partition" -> "defn"
  "partition" -> "count"
  "partition" -> "when-let"
  "partition" -> "cons"
  "partition" -> "="
  "partition" -> "partition"
  "partition" -> "lazy-seq"
  "partition" -> "take"
  "partition" -> "when"
  "partition" -> "list"
  "maybe-destructured" -> "gensym"
  "maybe-destructured" -> "let"
  "maybe-destructured" -> "symbol?"
  "maybe-destructured" -> "loop"
  "maybe-destructured" -> "next"
  "maybe-destructured" -> "concat"
  "maybe-destructured" -> "conj"
  "maybe-destructured" -> "seq"
  "maybe-destructured" -> "defn"
  "maybe-destructured" -> "->"
  "maybe-destructured" -> "cons"
  "maybe-destructured" -> "first"
  "maybe-destructured" -> "maybe-destructured"
  "maybe-destructured" -> "list"
  "maybe-destructured" -> "every?"
  "map-indexed" -> "chunked-seq?"
  "map-indexed" -> "chunk-buffer"
  "map-indexed" -> "letfn"
  "map-indexed" -> "let"
  "map-indexed" -> "dotimes"
  "map-indexed" -> "+"
  "map-indexed" -> "chunk-cons"
  "map-indexed" -> "chunk-append"
  "map-indexed" -> "inc"
  "map-indexed" -> "seq"
  "map-indexed" -> "defn"
  "map-indexed" -> "chunk-rest"
  "map-indexed" -> "count"
  "map-indexed" -> "when-let"
  "map-indexed" -> "cons"
  "map-indexed" -> "first"
  "map-indexed" -> "map-indexed"
  "map-indexed" -> "chunk"
  "map-indexed" -> "rest"
  "map-indexed" -> "int"
  "map-indexed" -> "lazy-seq"
  "map-indexed" -> "chunk-first"
  "contains?" -> "key"
  "contains?" -> "defn"
  "contains?" -> "contains?"
  "update-proxy" -> "defn"
  "update-proxy" -> "update-proxy"
  "update-proxy" -> "proxy"
  "shift-mask" -> "bit-and"
  "shift-mask" -> "defn-"
  "shift-mask" -> "->"
  "shift-mask" -> "shift-mask"
  "shift-mask" -> "bit-shift-right"
  "interpose" -> "repeat"
  "interpose" -> "defn"
  "interpose" -> "interleave"
  "interpose" -> "interpose"
  "interpose" -> "drop"
  "chunk" -> "defn"
  "chunk" -> "chunk"
  "aset-int" -> "def-aset"
  "aset-int" -> "aset-int"
  "aset-int" -> "int"
  "emit-method-builder" -> "gensym"
  "emit-method-builder" -> "fn"
  "emit-method-builder" -> "let"
  "emit-method-builder" -> "with-meta"
  "emit-method-builder" -> "concat"
  "emit-method-builder" -> "vector"
  "emit-method-builder" -> "map"
  "emit-method-builder" -> "defn-"
  "emit-method-builder" -> "seq"
  "emit-method-builder" -> "-cache-protocol-fn"
  "emit-method-builder" -> "or"
  "emit-method-builder" -> "str"
  "emit-method-builder" -> "first"
  "emit-method-builder" -> "emit-method-builder"
  "emit-method-builder" -> "apply"
  "emit-method-builder" -> "rest"
  "emit-method-builder" -> "keyword"
  "emit-method-builder" -> "hash-map"
  "emit-method-builder" -> "list"
  "ifn?" -> "instance?"
  "ifn?" -> "defn"
  "ifn?" -> "ifn?"
  "definterface" -> "fn"
  "definterface" -> "gen-interface"
  "definterface" -> "let"
  "definterface" -> "*ns*"
  "definterface" -> "import"
  "definterface" -> "symbol"
  "definterface" -> "with-meta"
  "definterface" -> "vec"
  "definterface" -> "concat"
  "definterface" -> "vector"
  "definterface" -> "sigs"
  "definterface" -> "map"
  "definterface" -> "seq"
  "definterface" -> "name"
  "definterface" -> "or"
  "definterface" -> "str"
  "definterface" -> "defmacro"
  "definterface" -> "namespace-munge"
  "definterface" -> "definterface"
  "definterface" -> "apply"
  "definterface" -> "list"
  "definterface" -> "meta"
  "group-by-sig" -> "fn"
  "group-by-sig" -> "let"
  "group-by-sig" -> "vals"
  "group-by-sig" -> "assoc"
  "group-by-sig" -> "defn-"
  "group-by-sig" -> "reduce1"
  "group-by-sig" -> "peek"
  "group-by-sig" -> "group-by-sig"
  "group-by-sig" -> "pop"
  "delay" -> "list*"
  "delay" -> "with-meta"
  "delay" -> "concat"
  "delay" -> "seq"
  "delay" -> "defmacro"
  "delay" -> "delay"
  "delay" -> "apply"
  "delay" -> "hash-map"
  "delay" -> "list"
  "apply" -> "list*"
  "apply" -> "spread"
  "apply" -> "seq"
  "apply" -> "defn"
  "apply" -> "cons"
  "apply" -> "apply"
  "swap!" -> "defn"
  "swap!" -> "swap!"
  "swap!" -> "atom"
  "defmulti" -> "instance?"
  "defmulti" -> "string?"
  "defmulti" -> "check-valid-options"
  "defmulti" -> "let"
  "defmulti" -> "next"
  "defmulti" -> "deref"
  "defmulti" -> "with-meta"
  "defmulti" -> "when-not"
  "defmulti" -> "concat"
  "defmulti" -> "vector"
  "defmulti" -> "conj"
  "defmulti" -> "assoc"
  "defmulti" -> "seq"
  "defmulti" -> "name"
  "defmulti" -> "global-hierarchy"
  "defmulti" -> "map?"
  "defmulti" -> "count"
  "defmulti" -> "first"
  "defmulti" -> "="
  "defmulti" -> "defmacro"
  "defmulti" -> "get"
  "defmulti" -> "and"
  "defmulti" -> "apply"
  "defmulti" -> "defmulti"
  "defmulti" -> "when"
  "defmulti" -> "hash-map"
  "defmulti" -> "list"
  "defmulti" -> "meta"
  "proxy" -> "if-not"
  "proxy" -> "fn"
  "proxy" -> "init-proxy"
  "proxy" -> "let"
  "proxy" -> "*ns*"
  "proxy" -> "loop"
  "proxy" -> "next"
  "proxy" -> "symbol"
  "proxy" -> "generate-proxy"
  "proxy" -> "*compile-files*"
  "proxy" -> "concat"
  "proxy" -> "vector"
  "proxy" -> "bases"
  "proxy" -> "assoc"
  "proxy" -> "vector?"
  "proxy" -> "map"
  "proxy" -> "seq"
  "proxy" -> "intern"
  "proxy" -> "name"
  "proxy" -> "proxy-name"
  "proxy" -> "or"
  "proxy" -> "get-proxy-class"
  "proxy" -> "cons"
  "proxy" -> "str"
  "proxy" -> "first"
  "proxy" -> "defmacro"
  "proxy" -> "resolve"
  "proxy" -> "contains?"
  "proxy" -> "apply"
  "proxy" -> "proxy"
  "proxy" -> "when"
  "proxy" -> "list"
  "proxy" -> "get-super-and-interfaces"
  "reify" -> "let"
  "reify" -> "with-meta"
  "reify" -> "concat"
  "reify" -> "parse-opts+specs"
  "reify" -> "seq"
  "reify" -> "defmacro"
  "reify" -> "methods"
  "reify" -> "reify"
  "reify" -> "list"
  "reify" -> "meta"
  "subvec" -> "defn"
  "subvec" -> "count"
  "subvec" -> "subvec"
  "byte-array" -> "defn"
  "byte-array" -> "byte-array"
  "rest" -> "fn"
  "rest" -> "rest"
  "keyword" -> "keyword?"
  "keyword" -> "string?"
  "keyword" -> "cond"
  "keyword" -> "symbol?"
  "keyword" -> "ns"
  "keyword" -> "name"
  "keyword" -> "defn"
  "keyword" -> "keyword"
  "prependss" -> "symbol?"
  "prependss" -> "concat"
  "prependss" -> "defn-"
  "prependss" -> "cons"
  "prependss" -> "prependss"
  "ns-map" -> "the-ns"
  "ns-map" -> "ns"
  "ns-map" -> "defn"
  "ns-map" -> "ns-map"
  "set-error-mode!" -> "defn"
  "set-error-mode!" -> "set-error-mode!"
  "maybe-min-hash" -> "for"
  "maybe-min-hash" -> "fn"
  "maybe-min-hash" -> "distinct?"
  "maybe-min-hash" -> "map"
  "maybe-min-hash" -> "inc"
  "maybe-min-hash" -> "defn-"
  "maybe-min-hash" -> "filter"
  "maybe-min-hash" -> "first"
  "maybe-min-hash" -> "range"
  "maybe-min-hash" -> "bit-shift-left"
  "maybe-min-hash" -> "shift-mask"
  "maybe-min-hash" -> "apply"
  "maybe-min-hash" -> "maybe-min-hash"
  "maybe-min-hash" -> "dec"
  "maybe-min-hash" -> "max-mask-bits"
  "unquote" -> "unquote"
  "super-chain" -> "defn-"
  "super-chain" -> "cons"
  "super-chain" -> "super-chain"
  "super-chain" -> "when"
  "int" -> "defn"
  "int" -> "int"
  "release-pending-sends" -> "defn"
  "release-pending-sends" -> "release-pending-sends"
  "mod" -> "let"
  "mod" -> "rem"
  "mod" -> "+"
  "mod" -> "zero?"
  "mod" -> "or"
  "mod" -> "defn"
  "mod" -> "="
  "mod" -> "pos?"
  "mod" -> "mod"
  "mod" -> "num"
  "bigdec" -> "instance?"
  "bigdec" -> "cond"
  "bigdec" -> "long"
  "bigdec" -> "number?"
  "bigdec" -> "ratio?"
  "bigdec" -> "/"
  "bigdec" -> "float?"
  "bigdec" -> "decimal?"
  "bigdec" -> "defn"
  "bigdec" -> "bigdec"
  "bigdec" -> "double"
  "nfirst" -> "fn"
  "nfirst" -> "next"
  "nfirst" -> "first"
  "nfirst" -> "nfirst"
  "nthnext" -> "loop"
  "nthnext" -> "next"
  "nthnext" -> "seq"
  "nthnext" -> "defn"
  "nthnext" -> "pos?"
  "nthnext" -> "and"
  "nthnext" -> "nthnext"
  "nthnext" -> "dec"
  "descriptor" -> "defn-"
  "descriptor" -> "descriptor"
  "aset-long" -> "long"
  "aset-long" -> "def-aset"
  "aset-long" -> "aset-long"
  "non-private-methods" -> "fn"
  "non-private-methods" -> "let"
  "non-private-methods" -> "filter-methods"
  "non-private-methods" -> "defn-"
  "non-private-methods" -> "or"
  "non-private-methods" -> "="
  "non-private-methods" -> "non-private-methods"
  "non-private-methods" -> "not"
  "struct" -> "vals"
  "struct" -> "defn"
  "struct" -> "struct"
  "array-map" -> "defn"
  "array-map" -> "array-map"
  "array-map" -> "to-array"
  "unchecked-char" -> "defn"
  "unchecked-char" -> "unchecked-char"
  "bigint" -> "instance?"
  "bigint" -> "cond"
  "bigint" -> "long"
  "bigint" -> "number?"
  "bigint" -> "ratio?"
  "bigint" -> "decimal?"
  "bigint" -> "defn"
  "bigint" -> "bigint"
  "dec" -> "defn"
  "dec" -> "dec"
  "println" -> "prn"
  "println" -> "defn"
  "println" -> "apply"
  "println" -> "println"
  "println" -> "*print-readably*"
  "println" -> "binding"
  "aget" -> "class"
  "aget" -> "defn"
  "aget" -> "array"
  "aget" -> "get"
  "aget" -> "apply"
  "aget" -> "aget"
  "find-keyword" -> "keyword?"
  "find-keyword" -> "string?"
  "find-keyword" -> "cond"
  "find-keyword" -> "symbol?"
  "find-keyword" -> "ns"
  "find-keyword" -> "name"
  "find-keyword" -> "defn"
  "find-keyword" -> "find-keyword"
  "pr" -> "next"
  "pr" -> "*out*"
  "pr" -> "pr-on"
  "pr" -> "defn"
  "pr" -> "first"
  "pr" -> "if-let"
  "pr" -> "apply"
  "pr" -> "pr"
  "drop" -> "fn"
  "drop" -> "let"
  "drop" -> "seq"
  "drop" -> "defn"
  "drop" -> "pos?"
  "drop" -> "and"
  "drop" -> "rest"
  "drop" -> "dec"
  "drop" -> "drop"
  "drop" -> "lazy-seq"
  "clojure-version" -> "*clojure-version*"
  "clojure-version" -> "defn"
  "clojure-version" -> "count"
  "clojure-version" -> "when-let"
  "clojure-version" -> "str"
  "clojure-version" -> "pos?"
  "clojure-version" -> "clojure-version"
  "clojure-version" -> "when"
  "gen-class" -> "generate-class"
  "gen-class" -> "let"
  "gen-class" -> "*compile-files*"
  "gen-class" -> "vec"
  "gen-class" -> "map"
  "gen-class" -> "defmacro"
  "gen-class" -> "partition"
  "gen-class" -> "gen-class"
  "gen-class" -> "into1"
  "gen-class" -> "when"
  "eval" -> "defn"
  "eval" -> "eval"
  "aclone" -> "defn"
  "aclone" -> "array"
  "aclone" -> "aclone"
  "char-name-string" -> "char-name-string"
  "pop" -> "defn"
  "pop" -> "pop"
  "primitives-classnames" -> "primitives-classnames"
  "atom" -> "setup-reference"
  "atom" -> "defn"
  "atom" -> "atom"
  "defonce" -> "let"
  "defonce" -> "when-not"
  "defonce" -> "concat"
  "defonce" -> "vector"
  "defonce" -> "seq"
  "defonce" -> "name"
  "defonce" -> "defmacro"
  "defonce" -> "apply"
  "defonce" -> "defonce"
  "defonce" -> "list"
  "bit-shift-right" -> "defn"
  "bit-shift-right" -> "bit-shift-right"
  "*pending-paths*" -> "defonce"
  "*pending-paths*" -> "*pending-paths*"
  "mk-am" -> "gensym"
  "mk-am" -> "let"
  "mk-am" -> "symbol"
  "mk-am" -> "with-meta"
  "mk-am" -> "concat"
  "mk-am" -> "vector"
  "mk-am" -> "seq"
  "mk-am" -> "aset"
  "mk-am" -> "str"
  "mk-am" -> "defmacro"
  "mk-am" -> "apply"
  "mk-am" -> "reify"
  "mk-am" -> "aget"
  "mk-am" -> "aclone"
  "mk-am" -> "mk-am"
  "mk-am" -> "alength"
  "mk-am" -> "list"
  "delay?" -> "instance?"
  "delay?" -> "defn"
  "delay?" -> "delay?"
  "num" -> "defn"
  "num" -> "num"
  "realized?" -> "defn"
  "realized?" -> "realized?"
  "disj" -> "let"
  "disj" -> "next"
  "disj" -> "key"
  "disj" -> "defn"
  "disj" -> "set"
  "disj" -> "first"
  "disj" -> "disj"
  "disj" -> "when"
  "io!" -> "string?"
  "io!" -> "let"
  "io!" -> "next"
  "io!" -> "concat"
  "io!" -> "seq"
  "io!" -> "or"
  "io!" -> "first"
  "io!" -> "defmacro"
  "io!" -> "io!"
  "io!" -> "when"
  "io!" -> "list"
  "rational?" -> "integer?"
  "rational?" -> "ratio?"
  "rational?" -> "or"
  "rational?" -> "decimal?"
  "rational?" -> "defn"
  "rational?" -> "rational?"
  "merge-with" -> "val"
  "merge-with" -> "some"
  "merge-with" -> "fn"
  "merge-with" -> "let"
  "merge-with" -> "assoc"
  "merge-with" -> "seq"
  "merge-with" -> "key"
  "merge-with" -> "reduce1"
  "merge-with" -> "or"
  "merge-with" -> "defn"
  "merge-with" -> "identity"
  "merge-with" -> "get"
  "merge-with" -> "contains?"
  "merge-with" -> "merge-with"
  "merge-with" -> "when"
  "take-nth" -> "seq"
  "take-nth" -> "defn"
  "take-nth" -> "when-let"
  "take-nth" -> "cons"
  "take-nth" -> "first"
  "take-nth" -> "drop"
  "take-nth" -> "take-nth"
  "take-nth" -> "lazy-seq"
  "into1" -> "instance?"
  "into1" -> "conj"
  "into1" -> "conj!"
  "into1" -> "reduce1"
  "into1" -> "transient"
  "into1" -> "defn"
  "into1" -> "persistent!"
  "into1" -> "into1"
  "the-class" -> "some"
  "the-class" -> "cond"
  "the-class" -> "let"
  "the-class" -> "class?"
  "the-class" -> "defn-"
  "the-class" -> "str"
  "the-class" -> "prim->class"
  "the-class" -> "contains?"
  "the-class" -> "the-class"
  "double" -> "defn"
  "double" -> "double"
  "lazy-seq" -> "list*"
  "lazy-seq" -> "defmacro"
  "lazy-seq" -> "lazy-seq"
  "lazy-seq" -> "list"
  "emit-defrecord" -> "list*"
  "emit-defrecord" -> "empty"
  "emit-defrecord" -> "gensym"
  "emit-defrecord" -> "hash-set"
  "emit-defrecord" -> "some"
  "emit-defrecord" -> "letfn"
  "emit-defrecord" -> "keys"
  "emit-defrecord" -> "fn"
  "emit-defrecord" -> "bit-xor"
  "emit-defrecord" -> "let"
  "emit-defrecord" -> "*ns*"
  "emit-defrecord" -> "symbol"
  "emit-defrecord" -> "vals"
  "emit-defrecord" -> "+"
  "emit-defrecord" -> "with-meta"
  "emit-defrecord" -> "when-not"
  "emit-defrecord" -> "identical?"
  "emit-defrecord" -> "vec"
  "emit-defrecord" -> "concat"
  "emit-defrecord" -> "vector"
  "emit-defrecord" -> "conj"
  "emit-defrecord" -> "assoc"
  "emit-defrecord" -> "boolean"
  "emit-defrecord" -> "map"
  "emit-defrecord" -> "mapcat"
  "emit-defrecord" -> "defn-"
  "emit-defrecord" -> "seq"
  "emit-defrecord" -> "class"
  "emit-defrecord" -> "name"
  "emit-defrecord" -> "into"
  "emit-defrecord" -> "or"
  "emit-defrecord" -> "hash"
  "emit-defrecord" -> "replace"
  "emit-defrecord" -> "condp"
  "emit-defrecord" -> "count"
  "emit-defrecord" -> "set"
  "emit-defrecord" -> "comp"
  "emit-defrecord" -> "->"
  "emit-defrecord" -> "cons"
  "emit-defrecord" -> "str"
  "emit-defrecord" -> "first"
  "emit-defrecord" -> "="
  "emit-defrecord" -> "case"
  "emit-defrecord" -> "methods"
  "emit-defrecord" -> "namespace-munge"
  "emit-defrecord" -> "get"
  "emit-defrecord" -> "resolve"
  "emit-defrecord" -> "and"
  "emit-defrecord" -> "contains?"
  "emit-defrecord" -> "apply"
  "emit-defrecord" -> "reify"
  "emit-defrecord" -> "keyword"
  "emit-defrecord" -> "emit-defrecord"
  "emit-defrecord" -> "when"
  "emit-defrecord" -> "hash-map"
  "emit-defrecord" -> "remove"
  "emit-defrecord" -> "not-empty"
  "emit-defrecord" -> "list"
  "emit-defrecord" -> "dissoc"
  "emit-defrecord" -> "not"
  "emit-defrecord" -> "meta"
  "take-last" -> "loop"
  "take-last" -> "next"
  "take-last" -> "seq"
  "take-last" -> "defn"
  "take-last" -> "drop"
  "take-last" -> "take-last"
  "line-seq" -> "defn"
  "line-seq" -> "when-let"
  "line-seq" -> "cons"
  "line-seq" -> "lazy-seq"
  "line-seq" -> "line-seq"
  "take" -> "seq"
  "take" -> "defn"
  "take" -> "when-let"
  "take" -> "cons"
  "take" -> "first"
  "take" -> "pos?"
  "take" -> "rest"
  "take" -> "dec"
  "take" -> "lazy-seq"
  "take" -> "take"
  "take" -> "when"
  "unchecked-byte" -> "defn"
  "unchecked-byte" -> "unchecked-byte"
  "when" -> "test"
  "when" -> "cons"
  "when" -> "defmacro"
  "when" -> "when"
  "when" -> "list"
  "load-all" -> "dosync"
  "load-all" -> "commute"
  "load-all" -> "deref"
  "load-all" -> "load-one"
  "load-all" -> "conj"
  "load-all" -> "ref"
  "load-all" -> "defn-"
  "load-all" -> "reduce1"
  "load-all" -> "*loaded-libs*"
  "load-all" -> "require"
  "load-all" -> "load-all"
  "load-all" -> "binding"
  "load-all" -> "sorted-set"
  "areduce" -> "let"
  "areduce" -> "loop"
  "areduce" -> "unchecked-inc"
  "areduce" -> "concat"
  "areduce" -> "vector"
  "areduce" -> "seq"
  "areduce" -> "<"
  "areduce" -> "defmacro"
  "areduce" -> "apply"
  "areduce" -> "areduce"
  "areduce" -> "alength"
  "areduce" -> "list"
  "set?" -> "instance?"
  "set?" -> "defn"
  "set?" -> "set?"
  "make-array" -> "let"
  "make-array" -> "dotimes"
  "make-array" -> "defn"
  "make-array" -> "count"
  "make-array" -> "nth"
  "make-array" -> "cons"
  "make-array" -> "aset-int"
  "make-array" -> "int"
  "make-array" -> "make-array"
  "make-array" -> "alength"
  "make-array" -> "type"
  "rand-nth" -> "rand-int"
  "rand-nth" -> "defn"
  "rand-nth" -> "count"
  "rand-nth" -> "nth"
  "rand-nth" -> "rand-nth"
  "alias" -> "the-ns"
  "alias" -> "*ns*"
  "alias" -> "defn"
  "alias" -> "alias"
  "use" -> "load-libs"
  "use" -> "defn"
  "use" -> "apply"
  "use" -> "use"
  "juxt" -> "list*"
  "juxt" -> "fn"
  "juxt" -> "let"
  "juxt" -> "conj"
  "juxt" -> "reduce1"
  "juxt" -> "defn"
  "juxt" -> "apply"
  "juxt" -> "juxt"
  "alength" -> "defn"
  "alength" -> "array"
  "alength" -> "alength"
  "chunk-first" -> "defn"
  "chunk-first" -> "chunk-first"
  "defprotocol" -> "name"
  "defprotocol" -> "defmacro"
  "defprotocol" -> "defprotocol"
  "defprotocol" -> "emit-protocol"
  "to-array" -> "defn"
  "to-array" -> "to-array"
  "hash-map" -> "defn"
  "hash-map" -> "hash-map"
  "bit-and-not" -> "reduce1"
  "bit-and-not" -> "defn"
  "bit-and-not" -> "bit-and-not"
  "compare-and-set!" -> "defn"
  "compare-and-set!" -> "atom"
  "compare-and-set!" -> "compare-and-set!"
  "type" -> "class"
  "type" -> "or"
  "type" -> "defn"
  "type" -> "get"
  "type" -> "type"
  "type" -> "meta"
  "repeatedly" -> "defn"
  "repeatedly" -> "cons"
  "repeatedly" -> "lazy-seq"
  "repeatedly" -> "take"
  "repeatedly" -> "repeatedly"
  "trampoline" -> "fn?"
  "trampoline" -> "let"
  "trampoline" -> "defn"
  "trampoline" -> "apply"
  "trampoline" -> "trampoline"
  "set-error-handler!" -> "defn"
  "set-error-handler!" -> "set-error-handler!"
  "validate-fields" -> "some"
  "validate-fields" -> "let"
  "validate-fields" -> "when-not"
  "validate-fields" -> "vector?"
  "validate-fields" -> "defn-"
  "validate-fields" -> "str"
  "validate-fields" -> "when"
  "validate-fields" -> "validate-fields"
  "remove" -> "complement"
  "remove" -> "filter"
  "remove" -> "defn"
  "remove" -> "remove"
  "find" -> "map"
  "find" -> "key"
  "find" -> "defn"
  "find" -> "find"
  "coll?" -> "instance?"
  "coll?" -> "defn"
  "coll?" -> "coll?"
  "drop-while" -> "fn"
  "drop-while" -> "let"
  "drop-while" -> "seq"
  "drop-while" -> "defn"
  "drop-while" -> "first"
  "drop-while" -> "and"
  "drop-while" -> "rest"
  "drop-while" -> "lazy-seq"
  "drop-while" -> "drop-while"
  "parse-impls" -> "loop"
  "parse-impls" -> "next"
  "parse-impls" -> "seq?"
  "parse-impls" -> "assoc"
  "parse-impls" -> "defn-"
  "parse-impls" -> "seq"
  "parse-impls" -> "first"
  "parse-impls" -> "take-while"
  "parse-impls" -> "drop-while"
  "parse-impls" -> "parse-impls"
  "not-empty" -> "seq"
  "not-empty" -> "defn"
  "not-empty" -> "when"
  "not-empty" -> "not-empty"
  "flatten" -> "sequential?"
  "flatten" -> "complement"
  "flatten" -> "seq"
  "flatten" -> "filter"
  "flatten" -> "defn"
  "flatten" -> "tree-seq"
  "flatten" -> "rest"
  "flatten" -> "flatten"
  "ex-data" -> "instance?"
  "ex-data" -> "defn"
  "ex-data" -> "when"
  "ex-data" -> "ex-data"
  "set-agent-send-off-executor!" -> "defn"
  "set-agent-send-off-executor!" -> "set-agent-send-off-executor!"
  "normalize-slurp-opts" -> "string?"
  "normalize-slurp-opts" -> "defn-"
  "normalize-slurp-opts" -> "first"
  "normalize-slurp-opts" -> "println"
  "normalize-slurp-opts" -> "normalize-slurp-opts"
  "println-str" -> "with-out-str"
  "println-str" -> "defn"
  "println-str" -> "apply"
  "println-str" -> "println"
  "println-str" -> "println-str"
  "list" -> "list"
  "get-super-and-interfaces" -> "next"
  "get-super-and-interfaces" -> "bases"
  "get-super-and-interfaces" -> "defn-"
  "get-super-and-interfaces" -> "first"
  "get-super-and-interfaces" -> "get-super-and-interfaces"
  "chunk-next" -> "defn"
  "chunk-next" -> "chunk-next"
  "every?" -> "nil?"
  "every?" -> "cond"
  "every?" -> "next"
  "every?" -> "seq"
  "every?" -> "defn"
  "every?" -> "first"
  "every?" -> "every?"
  "satisfies?" -> "find-protocol-impl"
  "satisfies?" -> "boolean"
  "satisfies?" -> "defn"
  "satisfies?" -> "satisfies?"
  "flush" -> "*out*"
  "flush" -> "defn"
  "flush" -> "flush"
  "assert-args" -> "list*"
  "assert-args" -> "second"
  "assert-args" -> "let"
  "assert-args" -> "*ns*"
  "assert-args" -> "when-not"
  "assert-args" -> "concat"
  "assert-args" -> "seq"
  "assert-args" -> "nnext"
  "assert-args" -> "str"
  "assert-args" -> "first"
  "assert-args" -> "defmacro"
  "assert-args" -> "when"
  "assert-args" -> "list"
  "assert-args" -> "assert-args"
  "assert-args" -> "meta"
  "load-lib" -> "val"
  "load-lib" -> "doseq"
  "load-lib" -> "cond"
  "load-lib" -> "let"
  "load-lib" -> "*ns*"
  "load-lib" -> "symbol"
  "load-lib" -> "select-keys"
  "load-lib" -> "deref"
  "load-lib" -> "load-one"
  "load-lib" -> "remove-ns"
  "load-lib" -> "print-str"
  "load-lib" -> "mapcat"
  "load-lib" -> "ns-name"
  "load-lib" -> "defn-"
  "load-lib" -> "seq"
  "load-lib" -> "key"
  "load-lib" -> "name"
  "load-lib" -> "or"
  "load-lib" -> "load"
  "load-lib" -> "str"
  "load-lib" -> "find-ns"
  "load-lib" -> "*loaded-libs*"
  "load-lib" -> "throw-if"
  "load-lib" -> "printf"
  "load-lib" -> "require"
  "load-lib" -> "pos?"
  "load-lib" -> "*loading-verbosely*"
  "load-lib" -> "and"
  "load-lib" -> "refer"
  "load-lib" -> "contains?"
  "load-lib" -> "apply"
  "load-lib" -> "int"
  "load-lib" -> "when"
  "load-lib" -> "load-all"
  "load-lib" -> "alias"
  "load-lib" -> "use"
  "load-lib" -> "hash-map"
  "load-lib" -> "load-lib"
  "load-lib" -> "not"
  "load-lib" -> "binding"
  "max-mask-bits" -> "max-mask-bits"
  "some->>" -> "gensym"
  "some->>" -> "nil?"
  "some->>" -> "fn"
  "some->>" -> "repeat"
  "some->>" -> "let"
  "some->>" -> "->>"
  "some->>" -> "concat"
  "some->>" -> "vector"
  "some->>" -> "map"
  "some->>" -> "seq"
  "some->>" -> "interleave"
  "some->>" -> "defmacro"
  "some->>" -> "apply"
  "some->>" -> "list"
  "some->>" -> "some->>"
  "sort" -> "let"
  "sort" -> "seq"
  "sort" -> "defn"
  "sort" -> "comp"
  "sort" -> "compare"
  "sort" -> "to-array"
  "sort" -> "sort"
  "prep-ints" -> "let"
  "prep-ints" -> "zero?"
  "prep-ints" -> "fits-table?"
  "prep-ints" -> "map"
  "prep-ints" -> "defn-"
  "prep-ints" -> "or"
  "prep-ints" -> "case-map"
  "prep-ints" -> "shift-mask"
  "prep-ints" -> "maybe-min-hash"
  "prep-ints" -> "int"
  "prep-ints" -> "prep-ints"
  "dissoc" -> "let"
  "dissoc" -> "next"
  "dissoc" -> "map"
  "dissoc" -> "key"
  "dissoc" -> "defn"
  "dissoc" -> "first"
  "dissoc" -> "dissoc"
  "cond->" -> "gensym"
  "cond->" -> "fn"
  "cond->" -> "repeat"
  "cond->" -> "let"
  "cond->" -> "concat"
  "cond->" -> "vector"
  "cond->" -> "assert"
  "cond->" -> "map"
  "cond->" -> "seq"
  "cond->" -> "test"
  "cond->" -> "count"
  "cond->" -> "interleave"
  "cond->" -> "->"
  "cond->" -> "defmacro"
  "cond->" -> "even?"
  "cond->" -> "partition"
  "cond->" -> "apply"
  "cond->" -> "list"
  "cond->" -> "cond->"
  "not" -> "defn"
  "not" -> "not"
  "binding" -> "second"
  "binding" -> "pop-thread-bindings"
  "binding" -> "fn"
  "binding" -> "let"
  "binding" -> "loop"
  "binding" -> "next"
  "binding" -> "concat"
  "binding" -> "vector"
  "binding" -> "conj"
  "binding" -> "vector?"
  "binding" -> "seq"
  "binding" -> "count"
  "binding" -> "first"
  "binding" -> "defmacro"
  "binding" -> "push-thread-bindings"
  "binding" -> "even?"
  "binding" -> "apply"
  "binding" -> "hash-map"
  "binding" -> "list"
  "binding" -> "assert-args"
  "binding" -> "binding"
  "print-sequential" -> "*print-level*"
  "print-sequential" -> "loop"
  "print-sequential" -> "sequence"
  "print-sequential" -> "zero?"
  "print-sequential" -> "neg?"
  "print-sequential" -> "*print-length*"
  "print-sequential" -> "defn-"
  "print-sequential" -> "seq"
  "print-sequential" -> "when-let"
  "print-sequential" -> "and"
  "print-sequential" -> "dec"
  "print-sequential" -> "*print-dup*"
  "print-sequential" -> "when"
  "print-sequential" -> "not"
  "print-sequential" -> "binding"
  "print-sequential" -> "print-sequential"
  "error-handler" -> "defn"
  "error-handler" -> "error-handler"
  "get-method" -> "defn"
  "get-method" -> "get-method"
  "agent" -> "let"
  "agent" -> "setup-reference"
  "agent" -> "or"
  "agent" -> "defn"
  "agent" -> "apply"
  "agent" -> "when"
  "agent" -> "hash-map"
  "agent" -> "agent"
  "sorted-set" -> "keys"
  "sorted-set" -> "defn"
  "sorted-set" -> "sorted-set"
  "alter-var-root" -> "defn"
  "alter-var-root" -> "alter-var-root"
  "merge" -> "some"
  "merge" -> "conj"
  "merge" -> "reduce1"
  "merge" -> "or"
  "merge" -> "defn"
  "merge" -> "identity"
  "merge" -> "when"
  "merge" -> "merge"
  "subseq" -> "let"
  "subseq" -> "next"
  "subseq" -> "mk-bound-fn"
  "subseq" -> "seq"
  "subseq" -> "key"
  "subseq" -> "test"
  "subseq" -> "defn"
  "subseq" -> "when-let"
  "subseq" -> "take-while"
  "subseq" -> "subseq"
  "emit-protocol" -> "keyword?"
  "emit-protocol" -> "some"
  "emit-protocol" -> "string?"
  "emit-protocol" -> "second"
  "emit-protocol" -> "fn"
  "emit-protocol" -> "gen-interface"
  "emit-protocol" -> "repeat"
  "emit-protocol" -> "let"
  "emit-protocol" -> "*ns*"
  "emit-protocol" -> "-reset-methods"
  "emit-protocol" -> "munge"
  "emit-protocol" -> "loop"
  "emit-protocol" -> "next"
  "emit-protocol" -> "symbol"
  "emit-protocol" -> "vals"
  "emit-protocol" -> "with-meta"
  "emit-protocol" -> "vec"
  "emit-protocol" -> "concat"
  "emit-protocol" -> "vector"
  "emit-protocol" -> "sigs"
  "emit-protocol" -> "conj"
  "emit-protocol" -> "assoc"
  "emit-protocol" -> "vector?"
  "emit-protocol" -> "map"
  "emit-protocol" -> "mapcat"
  "emit-protocol" -> "defn-"
  "emit-protocol" -> "seq"
  "emit-protocol" -> "intern"
  "emit-protocol" -> "alter-meta!"
  "emit-protocol" -> "name"
  "emit-protocol" -> "reduce1"
  "emit-protocol" -> "nnext"
  "emit-protocol" -> "or"
  "emit-protocol" -> "condp"
  "emit-protocol" -> "count"
  "emit-protocol" -> "str"
  "emit-protocol" -> "first"
  "emit-protocol" -> "namespace-munge"
  "emit-protocol" -> "and"
  "emit-protocol" -> "emit-method-builder"
  "emit-protocol" -> "apply"
  "emit-protocol" -> "rest"
  "emit-protocol" -> "keyword"
  "emit-protocol" -> "dec"
  "emit-protocol" -> "defonce"
  "emit-protocol" -> "when"
  "emit-protocol" -> "hash-map"
  "emit-protocol" -> "list"
  "emit-protocol" -> "alter-var-root"
  "emit-protocol" -> "merge"
  "emit-protocol" -> "emit-protocol"
  "emit-protocol" -> "meta"
  "min" -> "reduce1"
  "min" -> "defn"
  "min" -> "min"
  "print-simple" -> "print-meta"
  "print-simple" -> "defn"
  "print-simple" -> "str"
  "print-simple" -> "print-simple"
  "bit-test" -> "defn"
  "bit-test" -> "bit-test"
  "await-for" -> "doseq"
  "await-for" -> "fn"
  "await-for" -> "let"
  "await-for" -> "defn"
  "await-for" -> "send"
  "await-for" -> "count"
  "await-for" -> "await"
  "await-for" -> "*agent*"
  "await-for" -> "io!"
  "await-for" -> "when"
  "await-for" -> "agent"
  "await-for" -> "await-for"
  "keep" -> "chunked-seq?"
  "keep" -> "chunk-buffer"
  "keep" -> "nil?"
  "keep" -> "let"
  "keep" -> "dotimes"
  "keep" -> "when-not"
  "keep" -> "chunk-cons"
  "keep" -> "chunk-append"
  "keep" -> "seq"
  "keep" -> "defn"
  "keep" -> "chunk-rest"
  "keep" -> "count"
  "keep" -> "when-let"
  "keep" -> "cons"
  "keep" -> "first"
  "keep" -> "chunk"
  "keep" -> "rest"
  "keep" -> "lazy-seq"
  "keep" -> "chunk-first"
  "keep" -> "keep"
  "disj!" -> "let"
  "disj!" -> "next"
  "disj!" -> "key"
  "disj!" -> "defn"
  "disj!" -> "set"
  "disj!" -> "first"
  "disj!" -> "disj!"
  "meta" -> "instance?"
  "meta" -> "fn"
  "meta" -> "meta"
  "emit-deftype*" -> "let"
  "emit-deftype*" -> "*ns*"
  "emit-deftype*" -> "symbol"
  "emit-deftype*" -> "with-meta"
  "emit-deftype*" -> "concat"
  "emit-deftype*" -> "conj"
  "emit-deftype*" -> "defn-"
  "emit-deftype*" -> "seq"
  "emit-deftype*" -> "name"
  "emit-deftype*" -> "str"
  "emit-deftype*" -> "methods"
  "emit-deftype*" -> "namespace-munge"
  "emit-deftype*" -> "list"
  "emit-deftype*" -> "meta"
  "emit-deftype*" -> "emit-deftype*"
  "sorted-map"
  "read-line"
  "re-pattern"
  "cond->>"
  "keyword?"
  "asm-type"
  "system-newline"
  "unchecked-inc-int"
  "val"
  "chunked-seq?"
  "find-protocol-impl"
  "vector-of"
  "object-array"
  "*compile-path*"
  "max-key"
  "list*"
  "ns-aliases"
  "booleans"
  "the-ns"
  "=="
  "chunk-buffer"
  "generate-class"
  "longs"
  "process-annotation"
  "shorts"
  "data-reader-var"
  "is-annotation?"
  "instance?"
  ">0?"
  "format"
  "sequential?"
  "fn?"
  "empty"
  "bound-fn"
  "dorun"
  "time"
  "remove-method"
  "gensym"
  "not="
  "*3"
  "load-data-readers"
  "pref"
  "unchecked-multiply"
  "doseq"
  "bit-or"
  "aset-byte"
  "if-not"
  "send-via"
  "hash-set"
  "->Vec"
  "add-watch"
  "unchecked-dec"
  "some"
  "nil?"
  "string?"
  "boolean-array"
  "second"
  "letfn"
  "keys"
  "for"
  "*2"
  "long-array"
  "pop-thread-bindings"
  "check-valid-options"
  "error-mode"
  "cond"
  "bit-set"
  "spit"
  "find-protocol-method"
  "fn"
  "sorted?"
  "short-array"
  "ns-unalias"
  "ns-publics"
  "EMPTY-NODE"
  "char-array"
  "dosync"
  "all-ns"
  "long"
  "with-open"
  "init-proxy"
  "add-classpath"
  "false?"
  "await1"
  "true?"
  "gen-interface"
  "sync"
  "emit-extend-protocol"
  "short"
  "ns-unmap"
  "protected-final-methods"
  "repeat"
  "zipmap"
  "distinct"
  "get-in"
  "bit-xor"
  "char-escape-string"
  "complement"
  "let"
  "get-validator"
  "dotimes"
  "ref-max-history"
  "*ns*"
  "promise"
  "defmethod"
  "set-agent-send-executor!"
  "protocol?"
  "-'"
  "pop!"
  "derive"
  "aset-float"
  "valid-java-method-name"
  "extend"
  "-reset-methods"
  "lazy-cat"
  "commute"
  "defstruct"
  "with-in-str"
  "partition-by"
  "rem"
  "odd?"
  "symbol?"
  "mapv"
  "*print-level*"
  "*allow-unresolved-vars*"
  "thread-bound?"
  "*data-readers*"
  "deref-future"
  "root-resource"
  "filterv"
  "proxy-call-with-super"
  "*unchecked-math*"
  "ns-interns"
  "re-matches"
  "split-with"
  "munge"
  "loop"
  "future-done?"
  "spread"
  "next"
  "writer"
  "import"
  "print-meta"
  "deliver"
  "symbol"
  "vals"
  "->ArrayChunk"
  "select-keys"
  "re-matcher"
  "rand"
  "deref"
  "load-one"
  "some->"
  "unchecked-inc"
  "libspec?"
  "*math-context*"
  "read"
  "sequence"
  "make-hierarchy"
  "+"
  "number?"
  "assoc!"
  "descendants"
  "generate-proxy"
  "into-array"
  "last"
  "some-fn"
  "unchecked-negate"
  "integer?"
  "defrecord"
  "reduced?"
  "*read-eval*"
  "alter"
  "prn"
  "with-meta"
  "with-out-str"
  "floats"
  "*"
  "*compile-files*"
  "emit-hinted-impl"
  "when-not"
  "butlast"
  "-"
  "->>"
  "reversible?"
  "rseq"
  "send-off"
  "seq?"
  "refer-clojure"
  "identical?"
  ".."
  "print"
  "vary-meta"
  "with-loading-context"
  "agent-error"
  "*command-line-args*"
  "bit-flip"
  "zero?"
  "bit-and"
  "load-data-reader-file"
  "unquote-splicing"
  "future"
  "re-groups"
  "*warn-on-reflection*"
  "reader"
  "newline"
  "replicate"
  "keep-indexed"
  "char?"
  "def-aset"
  "distinct?"
  "remove-ns"
  "ratio?"
  "xml-seq"
  "vec"
  "concat"
  "update-in"
  "vector"
  "sigs"
  "with-bindings*"
  "conj"
  "bases"
  "with-redefs"
  "root-directory"
  "/"
  "unchecked-add"
  "ref-set"
  "assoc"
  "unchecked-remainder-int"
  "seque"
  "load-libs"
  "aset-char"
  "boolean"
  "read-string"
  "binding-conveyor-fn"
  "neg?"
  "float-array"
  "doubles"
  "isa?"
  "future-call"
  "doto"
  "extends?"
  "fits-table?"
  "remove-watch"
  "print-str"
  "*e"
  "ref-history-count"
  "rsubseq"
  "*flush-on-newline*"
  "*out*"
  "future?"
  "vector?"
  "prep-hashes"
  "split-at"
  "chunk-cons"
  "ns-refers"
  "create-struct"
  "setup-reference"
  "proxy-super"
  "int-array"
  "unchecked-long"
  "float"
  "mk-bound-fn"
  "assert"
  "map"
  "+'"
  "add-doc-and-meta"
  "counted?"
  "memfn"
  "double-array"
  "ams"
  "accessor"
  "*print-length*"
  "frequencies"
  "chars"
  "class?"
  "rand-int"
  "*1"
  "aset-short"
  "unchecked-short"
  "prn-str"
  "iterate"
  "chunk-append"
  "when-first"
  "unchecked-double"
  "parse-opts"
  "slurp"
  "restart-agent"
  "parse-opts+specs"
  "unchecked-int"
  "mapcat"
  "assoc-in"
  "get-thread-bindings"
  "filter-methods"
  "build-positional-factory"
  "special-symbol?"
  "ref"
  "conj!"
  "find-var"
  "inc"
  "future-cancel"
  "emit-extend-type"
  "every-pred"
  "definline"
  "bound-fn*"
  "default-data-readers"
  "unchecked-subtract"
  "ns-name"
  "shuffle"
  "defn-"
  "*file*"
  "re-find"
  "bit-not"
  "construct-proxy"
  "ref-min-history"
  "destructure"
  "seq"
  "intern"
  "unchecked-multiply-int"
  "pvalues"
  "add-annotations"
  "to-array-2d"
  "sorted-map-by"
  "filter"
  "->VecNode"
  "*verbose-defrecords*"
  "assert-valid-fdecl"
  "*clojure-version*"
  "var?"
  "alter-meta!"
  "unchecked-dec-int"
  "print-object"
  "comment"
  "key"
  "class"
  "re-seq"
  "-cache-protocol-fn"
  "ns"
  "empty?"
  "test"
  "print-dup"
  "create-ns"
  "merge-hash-collisions"
  "generate-interface"
  "name"
  "list?"
  "reduce1"
  "global-hierarchy"
  "escape-class-name"
  "nthrest"
  "nary-inline"
  "aset"
  "nnext"
  "doall"
  "extenders"
  "data-reader-urls"
  "macroexpand-1"
  "not-any?"
  "resultset-seq"
  "reductions"
  "pr-on"
  "into"
  "with-precision"
  "*use-context-classloader*"
  "transient"
  "filter-key"
  "ffirst"
  "bit-clear"
  "proxy-name"
  "extend-type"
  "load-reader"
  "with-redefs-fn"
  "or"
  "hash"
  "as->"
  "inc'"
  "print-initialized"
  "expand-method-impl-cache"
  "print-ctor"
  "associative?"
  "float?"
  "drop-last"
  "replace"
  "decimal?"
  "defn"
  "parents"
  "map?"
  "prefers"
  "numerator"
  "condp"
  "quot"
  "chunk-rest"
  "unchecked-negate-int"
  "file-seq"
  "send"
  "with-local-vars"
  "reverse"
  "validate-generate-class-options"
  "with-bindings"
  "count"
  "kv-reduce"
  "get-proxy-class"
  "set"
  "ex-info"
  "unchecked-subtract-int"
  "when-let"
  "comp"
  "nth"
  "byte"
  "dissoc!"
  "*err*"
  "implements?"
  "constantly"
  "load"
  "namespace"
  "pr-str"
  "<"
  "rationalize"
  "sort-by"
  "->VecSeq"
  "cycle"
  "peek"
  "denominator"
  "find-field"
  "most-specific"
  "reduce"
  "interleave"
  "print-map"
  "amap"
  "->"
  "cons"
  "macroexpand"
  "ctor-sigs"
  "var-set"
  "add-annotation"
  "str"
  "aset-boolean"
  "ns-imports"
  "while"
  "coll-reduce"
  "remove-all-methods"
  "first"
  "bean"
  "="
  "memoize"
  "max-switch-table-size"
  "var-get"
  "unchecked-float"
  "range"
  "tree-seq"
  "defmacro"
  "set-validator!"
  "aset-double"
  "check-cyclic-dependency"
  "*'"
  "case"
  "unchecked-divide-int"
  "emit-impl"
  "enumeration-seq"
  "prefer-method"
  "partition-all"
  "ensure"
  "reduced"
  "find-ns"
  "not-every?"
  "struct-map"
  ">"
  "max"
  "proxy-mappings"
  "identity"
  "*loaded-libs*"
  "ints"
  "fnext"
  "biginteger"
  "min-key"
  "reset-meta!"
  "array"
  "push-thread-bindings"
  "unchecked-add-int"
  "subs"
  "compile"
  "throw-if"
  "agent-errors"
  "clear-agent-errors"
  "printf"
  "overload-name"
  "ns-resolve"
  "method-sig"
  "*default-data-reader-fn*"
  ">="
  "assert-same-protocol"
  "shutdown-agents"
  "reduce-kv"
  "reset!"
  "is-runtime-annotation?"
  "case-map"
  "even?"
  "require"
  "bit-shift-left"
  "dec'"
  "methods"
  "future-cancelled?"
  "compare"
  "deftype"
  "sorted-set-by"
  "cast"
  "namespace-munge"
  "supers"
  "pcalls"
  "load-string"
  "group-by"
  "get"
  "<="
  "await"
  "resolve"
  "bytes"
  "print-method"
  "bound?"
  "loaded-libs"
  "fnil"
  "force"
  "partial"
  ">1?"
  "pmap"
  "if-let"
  "comparator"
  "pos?"
  "prim->class"
  "char"
  "take-while"
  "*loading-verbosely*"
  "extend-protocol"
  "imap-cons"
  "and"
  "refer"
  "underive"
  "in-ns"
  "iterator-seq"
  "declare"
  "ancestors"
  "hash-combine"
  "persistent!"
  "locking"
  "partition"
  "maybe-destructured"
  "map-indexed"
  "contains?"
  "update-proxy"
  "shift-mask"
  "interpose"
  "chunk"
  "aset-int"
  "emit-method-builder"
  "ifn?"
  "definterface"
  "load-file"
  "group-by-sig"
  "delay"
  "apply"
  "swap!"
  "defmulti"
  "proxy"
  "reify"
  "subvec"
  "byte-array"
  "rest"
  "keyword"
  "prependss"
  "ns-map"
  "set-error-mode!"
  "maybe-min-hash"
  "unquote"
  "super-chain"
  "int"
  "release-pending-sends"
  "mod"
  "bigdec"
  "nfirst"
  "nthnext"
  "descriptor"
  "*agent*"
  "aset-long"
  "non-private-methods"
  "struct"
  "array-map"
  "unchecked-char"
  "bigint"
  "dec"
  "println"
  "aget"
  "find-keyword"
  "pr"
  "drop"
  "clojure-version"
  "*print-dup*"
  "gen-class"
  "eval"
  "aclone"
  "char-name-string"
  "pop"
  "primitives-classnames"
  "atom"
  "defonce"
  "bit-shift-right"
  "*pending-paths*"
  "mk-am"
  "delay?"
  "num"
  "realized?"
  "disj"
  "io!"
  "*print-readably*"
  "rational?"
  "merge-with"
  "take-nth"
  "*fn-loader*"
  "into1"
  "*print-meta*"
  "the-class"
  "double"
  "lazy-seq"
  "*in*"
  "emit-defrecord"
  "take-last"
  "line-seq"
  "take"
  "unchecked-byte"
  "when"
  "load-all"
  "areduce"
  "set?"
  "make-array"
  "rand-nth"
  "alias"
  "use"
  "juxt"
  "alength"
  "chunk-first"
  "*source-path*"
  "defprotocol"
  "to-array"
  "hash-map"
  "bit-and-not"
  "*compiler-options*"
  "compare-and-set!"
  "*assert*"
  "type"
  "repeatedly"
  "trampoline"
  "set-error-handler!"
  "validate-fields"
  "remove"
  "find"
  "coll?"
  "drop-while"
  "parse-impls"
  "not-empty"
  "flatten"
  "ex-data"
  "set-agent-send-off-executor!"
  "normalize-slurp-opts"
  "println-str"
  "list"
  "get-super-and-interfaces"
  "chunk-next"
  "every?"
  "satisfies?"
  "flush"
  "assert-args"
  "load-lib"
  "max-mask-bits"
  "some->>"
  "sort"
  "prep-ints"
  "dissoc"
  "cond->"
  "not"
  "binding"
  "print-sequential"
  "error-handler"
  "get-method"
  "agent"
  "sorted-set"
  "alter-var-root"
  "merge"
  "subseq"
  "emit-protocol"
  "min"
  "print-simple"
  "bit-test"
  "await-for"
  "keep"
  "disj!"
  "meta"
  "emit-deftype*"
}